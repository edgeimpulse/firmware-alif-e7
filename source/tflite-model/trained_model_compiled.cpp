/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.04.2023 11:47:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242368;
#else
constexpr int kTensorArenaSize = 241344;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -83, -107, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 33, 127, 19, 
  /* [1][0][][] */ 106, -95, -11, 
  /* [1][1][][] */ -127, 105, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -22, -1, -46, 
  /* [2][1][][] */ 37, 95, 127, 
  /* [2][2][][] */ -11, -92, -78, 
  /* [3][0][][] */ 119, 124, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 21, -60, 4, 
  /* [4][1][][] */ 25, -127, 7, 
  /* [4][2][][] */ 14, -98, -11, 
  /* [5][0][][] */ -58, 40, 4, 
  /* [5][1][][] */ -127, 44, 10, 
  /* [5][2][][] */ -84, 35, 7, 
  /* [6][0][][] */ -18, 78, 127, 
  /* [6][1][][] */ -54, 55, -18, 
  /* [6][2][][] */ -39, -55, -92, 
  /* [7][0][][] */ 36, 28, -17, 
  /* [7][1][][] */ 127, 72, -2, 
  /* [7][2][][] */ 27, 7, -16, 
  /* [8][0][][] */ -22, -32, 52, 
  /* [8][1][][] */ -56, -89, 127, 
  /* [8][2][][] */ -28, -63, 96, 
  /* [9][0][][] */ -23, 52, -13, 
  /* [9][1][][] */ -19, 127, -14, 
  /* [9][2][][] */ -8, 86, -9, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 16, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 112, 5, 
  /* [12][2][][] */ -79, 77, 4, 
  /* [13][0][][] */ 60, 14, -16, 
  /* [13][1][][] */ 127, 113, -11, 
  /* [13][2][][] */ 60, 89, 30, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -82, -24, 24, 
  /* [15][1][][] */ -127, -124, 21, 
  /* [15][2][][] */ -31, -85, -9, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.042813047766685486, 0.15634824335575104, 0.054302353411912918, 0.034535150974988937, 0.0054687066003680229, 0.0097779268398880959, 0.028761306777596474, 0.0063375751487910748, 0.030126309022307396, 0.0081907836720347404, 0.090990878641605377, 0.12887844443321228, 0.055145218968391418, 0.0046110386028885841, 0.12216386944055557, 0.0085252923890948296, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 952, 80, -849, 1347, 69780, 40112, 7531, 7947, 8635, 10884, 2134, -62, 8862, -4816, 60, 39888, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00016789430810604244, 0.00061313039623200893, 0.0002129504136973992, 0.00013543196837417781, 2.1445908714667894e-05, 3.8344813219737262e-05, 0.00011278944293735549, 2.4853237846400589e-05, 0.00011814239405794069, 3.2120722607942298e-05, 0.00035682698944583535, 0.00050540571101009846, 0.00021625577937811613, 1.8082504539052024e-05, 0.00047907402040436864, 3.3432519558118656e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 4,-4,5,1,-20,11,7,16,-7,-11,-3,-9,-3,-8,4,-1, 8,-4,0,3,13,-1,12,-25,-5,9,-10,87,-6,19,8,0, 6,-5,-9,3,-1,-13,-4,9,0,2,-3,-10,-3,-6,0,0, 
  /* [0][1][][] */ 15,-6,-4,1,127,-23,-127,-21,127,127,1,-4,112,-24,-2,-18, -127,127,127,-3,-90,-90,-17,-100,18,-106,127,127,127,127,127,127, 24,-2,-9,-3,-14,127,3,-11,-2,-12,-7,-4,7,-5,-10,-7, 
  /* [0][2][][] */ 5,-5,0,-16,-17,16,52,8,-6,-8,-1,0,-5,1,-2,-11, 25,-14,-6,-127,7,-15,-11,127,-4,1,1,-14,-14,-59,-12,-35, 4,0,-5,-8,-2,-3,-1,-3,1,2,-1,0,-2,-7,-4,-11, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0040654237382113934, 0.0082663977518677711, 0.0073363306000828743, 0.0068582682870328426, 0.041022311896085739, 0.025866391137242317, 0.0065743345767259598, 0.031492304056882858, 0.010937572456896305, 0.039789080619812012, 0.0090963570401072502, 0.0079926643520593643, 0.0047425003722310066, 0.010816974565386772, 0.0079617872834205627, 0.023518957197666168, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 23371, -757, -194, 3485, -469, 149, 10711, 1487, -81, 356, -2043, 2938, 326, -287, -529, -1105, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 9.5657029305584729e-05, 0.00019450347463134676, 0.00017261954781133682, 0.00016137101920321584, 0.00096523086540400982, 0.0006086209905333817, 0.00015469023492187262, 0.00074099539779126644, 0.0002573546371422708, 0.00093621370615437627, 0.00021403194114100188, 0.000188062695087865, 0.00011158824781887233, 0.00025451704277656972, 0.00018733617616817355, 0.00055338721722364426, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -16,-13,-15,-63,-22,-35,24,-16,41,5,-33,-4,117,127,-13,-105, 
  /* [1][0][][] */ 127,-64,-41,15,-48,71,-69,-40,-42,83,-33,-51,-8,3,-61,-14, 
  /* [2][0][][] */ -34,-98,38,43,40,-53,-71,-22,26,-85,23,-127,42,-22,-74,23, 
  /* [3][0][][] */ 42,12,12,15,-11,70,-57,-22,127,46,12,23,0,-16,8,28, 
  /* [4][0][][] */ -99,-41,-28,-127,-7,44,55,-115,26,-13,-49,-38,-121,30,-39,-22, 
  /* [5][0][][] */ 87,54,73,-30,52,-45,-127,-125,-15,-75,65,49,-60,51,68,-48, 
  /* [6][0][][] */ 106,34,-127,-76,20,-76,2,-90,-44,16,-123,92,93,-90,7,77, 
  /* [7][0][][] */ -127,-3,100,-27,-65,3,-4,-65,-48,61,88,-33,65,-25,26,31, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.007059470284730196, 0.0089238341897726059, 0.0073502757586538792, 0.010006836615502834, 0.0076600462198257446, 0.0066325468942523003, 0.0070923501625657082, 0.011136686429381371, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -8091, -3092, 11926, -9703, 23469, 7831, -8617, 10739, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0001661051792325452, 0.00020997256797272712, 0.00017294766439590603, 0.00023545497970189899, 0.00018023638403974473, 0.00015605993394274265, 0.00016687883180566132, 0.00026203968445770442, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -30,30,1,-23,-68,-35,-127,27, 
  /* [1][0][][] */ 76,-76,-69,-61,127,-91,88,26, 
  /* [2][0][][] */ -94,111,-48,-127,44,-26,-31,37, 
  /* [3][0][][] */ 34,20,84,-5,83,118,127,-1, 
  /* [4][0][][] */ -76,-127,48,15,-44,-93,-1,-38, 
  /* [5][0][][] */ 127,-30,72,60,-79,-3,0,-20, 
  /* [6][0][][] */ 25,35,127,-29,39,-37,-42,27, 
  /* [7][0][][] */ 30,4,-127,-32,-43,96,92,-74, 
  /* [8][0][][] */ 4,127,-46,5,69,105,48,53, 
  /* [9][0][][] */ 0,118,-57,103,18,-127,31,120, 
  /* [10][0][][] */ 6,-127,-6,-31,-81,-125,-57,-86, 
  /* [11][0][][] */ -127,-80,111,49,-6,-70,108,65, 
  /* [12][0][][] */ -22,44,-127,86,30,-60,-84,106, 
  /* [13][0][][] */ 95,-127,93,74,9,31,35,-61, 
  /* [14][0][][] */ -8,92,-43,-122,-31,-127,-29,-59, 
  /* [15][0][][] */ 41,115,36,-18,34,-67,101,-127, 
  /* [16][0][][] */ -111,-127,-61,106,-53,23,-15,66, 
  /* [17][0][][] */ -28,-116,-127,83,-71,76,-48,73, 
  /* [18][0][][] */ -99,-68,-33,105,-17,84,1,127, 
  /* [19][0][][] */ 59,-108,97,-127,16,-68,21,-29, 
  /* [20][0][][] */ 5,69,35,20,38,127,70,-4, 
  /* [21][0][][] */ 26,111,45,-37,37,-69,92,-127, 
  /* [22][0][][] */ 21,18,114,18,-9,127,37,-38, 
  /* [23][0][][] */ -104,-64,33,-70,94,95,-60,-127, 
  /* [24][0][][] */ -102,-103,43,-108,114,112,-62,-127, 
  /* [25][0][][] */ 127,5,-63,-12,11,31,-64,-6, 
  /* [26][0][][] */ -121,-34,-127,-25,-50,-30,18,-2, 
  /* [27][0][][] */ 76,29,1,-53,-127,-25,86,90, 
  /* [28][0][][] */ -127,-70,-1,56,-87,-101,21,-1, 
  /* [29][0][][] */ 117,97,20,-127,35,4,-60,-98, 
  /* [30][0][][] */ -90,-62,38,-58,79,84,-47,-127, 
  /* [31][0][][] */ 44,42,-5,127,0,-80,7,10, 
  /* [32][0][][] */ -30,127,-10,27,23,72,-18,50, 
  /* [33][0][][] */ -36,127,-69,17,27,-29,-20,-1, 
  /* [34][0][][] */ -127,-91,-53,97,-3,4,12,104, 
  /* [35][0][][] */ -48,127,-29,-1,67,104,55,65, 
  /* [36][0][][] */ 67,26,7,-47,-127,-22,96,112, 
  /* [37][0][][] */ -62,106,28,24,-127,107,-24,-106, 
  /* [38][0][][] */ 46,26,32,32,127,66,96,44, 
  /* [39][0][][] */ -26,-67,33,-22,9,34,-95,127, 
  /* [40][0][][] */ -70,-55,-79,127,-27,-5,19,69, 
  /* [41][0][][] */ 127,20,55,121,-45,-13,-6,-22, 
  /* [42][0][][] */ -38,9,-62,-127,55,-102,9,86, 
  /* [43][0][][] */ 23,-2,84,-7,40,127,87,10, 
  /* [44][0][][] */ -31,-25,-68,127,47,14,-39,-35, 
  /* [45][0][][] */ 65,127,115,-121,30,-69,32,-117, 
  /* [46][0][][] */ -33,-127,-41,32,-3,45,-64,117, 
  /* [47][0][][] */ 42,56,127,12,90,114,116,-18, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0046446751803159714, 0.0043143597431480885, 0.0031485033687204123, 0.0032856764737516642, 0.0007517555495724082, 0.0031481508631259203, 0.0052380324341356754, 0.0021857826504856348, 0.0030140399467200041, 0.0051846937276422977, 0.003141084685921669, 0.0029242814052850008, 0.0020335025619715452, 0.0038267988711595535, 0.0031528533436357975, 0.0035840186756104231, 0.0026343811769038439, 0.0009273522300645709, 0.002404981292784214, 0.0038298908621072769, 0.0041588889434933662, 0.0021859428379684687, 0.0045232702977955341, 0.0033117863349616528, 0.0040633655153214931, 0.007504825945943594, 0.0033724501263350248, 0.0078958654776215553, 0.0027547881472855806, 0.00074174057226628065, 0.0034613015595823526, 0.0073467097245156765, 0.0040211915038526058, 0.00413151690736413, 0.0033493747469037771, 0.0036335985641926527, 0.0037796839606016874, 0.0064813788048923016, 0.0041441414505243301, 0.0057130311615765095, 0.0035092534963041544, 0.0031366576440632343, 0.0032737934961915016, 0.0043657892383635044, 0.0041878437623381615, 0.0024015156086534262, 0.0029444047249853611, 0.0032398996409028769, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1280, -489, -398, 1456, 15175, 2304, -494, 4468, 1761, 1447, 341, 3563, 1631, 649, -828, 364, 3083, 11248, 3671, -660, 1134, -1249, -47, 2476, -414, -829, 1674, -74, 3228, 14896, 2322, -83, 536, -9, 2496, -7, 629, -252, 1127, 1130, 1774, 2383, 397, -477, 719, 2400, 1465, -261, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00041374831926077604, 0.00038432376459240913, 0.00028046913212165236, 0.00029268852085806429, 6.6966487793251872e-05, 0.00028043772908858955, 0.00046660465886816382, 0.000194709820789285, 0.00026849110145121813, 0.00046185325481928885, 0.00027980827144347131, 0.00026049540610983968, 0.00018114470003638417, 0.00034089176915585995, 0.00028085662052035332, 0.00031926488736644387, 0.00023467103892471641, 8.2608668890316039e-05, 0.00021423607540782541, 0.00034116720780730247, 0.00037047441583126783, 0.00019472409621812403, 0.000402933539589867, 0.00029501438257284462, 0.00036196518340148032, 0.00066853093449026346, 0.00030041832360439003, 0.00070336478529497981, 0.00024539692094549537, 6.6074353526346385e-05, 0.00030833322671242058, 0.00065444590291008353, 0.00035820831544697285, 0.00036803609691560268, 0.00029836277826689184, 0.00032368148094974458, 0.00033669476397335529, 0.00057736213784664869, 0.00036916069802828133, 0.0005089176120236516, 0.00031260479590855539, 0.00027941391454078257, 0.00029162998544052243, 0.00038890511495992541, 0.0003730537137016654, 0.00021392734197434038, 0.00026228799833916128, 0.00028861072496511042, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -38,-82,-19,-20,127,-65,64,-45,-79,-73,-26,-42,97,45,42,-117,46,-22,-2,-47,-65,114,9,19,-29,90,55,-28,64,-73,23,-39,-127,-92,38,67,23,77,127,-62,-119,-9,25,64,42,-127,91,81, -86,-119,-81,42,-86,103,59,-63,-62,42,69,-117,127,102,91,-72,-81,-64,28,-69,-91,82,-78,110,-110,110,85,-111,94,-46,3,-105,-50,-87,71,119,102,127,126,-55,-127,-63,69,80,75,98,88,71, -14,-83,-67,94,-52,-38,24,-6,77,15,55,-89,10,48,-32,10,-74,-14,29,-42,-41,18,-71,3,-77,69,30,-65,27,57,123,-63,31,12,-13,48,73,68,57,1,-26,84,46,20,35,25,23,-124, 
  /* [0][1][][] */ -104,-98,-13,-92,-77,-80,107,-116,-127,-127,86,-75,75,56,-113,-86,127,-127,-62,-79,-91,127,-34,13,-17,102,98,-58,-123,-74,4,-55,-100,-127,-127,62,42,93,13,-93,49,0,66,120,92,101,124,-122, -127,-127,-101,-127,-27,127,127,-127,72,77,127,-127,104,127,33,-127,56,-86,-127,-127,-127,89,-127,127,-127,127,127,-127,-127,127,-15,-127,-110,-107,47,127,127,114,-11,-127,80,-90,127,127,127,-5,127,127, -49,-78,-127,121,67,-47,55,-25,49,20,11,-70,3,60,61,-52,-15,7,-18,-63,-58,44,-72,-13,-123,53,36,-81,-66,44,127,-83,-30,11,51,72,75,61,-28,-36,25,127,71,19,51,-45,16,36, 
  /* [0][2][][] */ -83,-40,13,22,-48,-34,27,-44,24,-44,3,-45,7,28,-36,-25,-82,-15,93,-17,-2,36,-63,-8,3,56,59,-14,48,60,-9,-12,-9,-95,-41,29,25,18,-67,-48,22,-5,33,42,24,50,18,-59, -91,-39,-34,-87,96,36,51,-58,72,31,-42,-68,3,49,-127,-83,37,8,50,-73,-43,9,-54,50,-79,63,63,-39,45,10,-35,-35,-64,-20,-62,36,18,29,-124,-64,22,-50,73,75,41,-106,19,15, -1,-23,-56,-38,-27,-18,24,-22,-64,11,-24,-18,-11,6,10,-34,34,34,-5,-42,-26,-2,-21,-27,-65,16,18,-16,7,-54,53,-1,-69,30,20,36,13,22,-65,-22,8,41,13,17,19,-7,-2,47, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0041349497623741627, 0.0038286803755909204, 0.0074910838156938553, 0.0056459917686879635, 0.028988974168896675, 0.0060031386092305183, 0.0068178479559719563, 0.0042382241226732731, 0.0056481780484318733, 0.0030946268234401941, 0.0032877500634640455, 0.0022791014052927494, 0.0046774824149906635, 0.0028119022026658058, 0.009183201938867569, 0.0069547765888273716, 0.0055783651769161224, 0.016142724081873894, 0.0059112962335348129, 0.0068793473765254021, 0.0044915112666785717, 0.018647309392690659, 0.0060603776946663857, 0.0096788499504327774, 0.0046766446903347969, 0.0041069947183132172, 0.0025665462017059326, 0.0046371826902031898, 0.0063905925489962101, 0.032395623624324799, 0.0093924989923834801, 0.0041033332236111164, 0.0049988790415227413, 0.0060988436453044415, 0.0076188552193343639, 0.002833889564499259, 0.0050326199270784855, 0.0019730203785002232, 0.0042399927042424679, 0.0031617691274732351, 0.0069856862537562847, 0.006312402430921793, 0.0040106787346303463, 0.0041626682505011559, 0.0035670374054461718, 0.013343085534870625, 0.0030404026620090008, 0.007193257100880146, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 12973, 6102, 5443, 1362, 1062, 628, -1174, 30444, 896, 853, 5959, 59927, 752, 3034, 604, 11787, -1004, 11570, 1232, 8649, 11507, -190, 4235, -9565, 13528, 880, 2045, 12639, 1018, -2228, -9304, 10668, 5304, 2747, 484, 4026, -8463, 10044, -1238, 17397, 344, -1246, 1874, 1257, 94, 21, 547, -1335, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 9.7292941063642502e-05, 9.0086599811911583e-05, 0.00017626080079935491, 0.00013284686428960413, 0.00068209349410608411, 0.00014125031884759665, 0.00016041994967963547, 9.9722921731881797e-05, 0.0001328983053099364, 7.2814749728422612e-05, 7.7358825365081429e-05, 5.3625917644239962e-05, 0.00011005841224687174, 6.6162407165393233e-05, 0.00021607535018119961, 0.0001636418019188568, 0.0001312556560151279, 0.0003798288234975189, 0.00013908933033235371, 0.00016186700668185949, 0.00010568262223387137, 0.00043876023846678436, 0.00014259712770581245, 0.00022773764794692397, 0.00011003870167769492, 9.6635172667447478e-05, 6.0389324062271044e-05, 0.0001091101803467609, 0.00015036689001135528, 0.00076224998338147998, 0.00022099998022895306, 9.6549018053337932e-05, 0.0001176206860691309, 0.00014350221317727119, 0.00017926718282978982, 6.6679756855592132e-05, 0.00011841458763228729, 4.6424011088674888e-05, 9.9764532933477312e-05, 7.4394571129232645e-05, 0.00016436909209005535, 0.00014852712047286332, 9.4368915597442538e-05, 9.7945136076305062e-05, 8.3930295659229159e-05, 0.00031395495170727372, 7.1538888732902706e-05, 0.00016925310774240643, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -46,-5,31,13,-34,-15,10,8,-41,-5,-67,-59,-24,-66,-8,-31,48,-41,41,42,-16,31,-40,14,0,-40,56,-17,-5,-20,17,7,86,36,38,-127,17,-3,-15,-34,2,-20,48,52,36,6,26,6, 
  /* [1][0][][] */ 4,41,65,-27,-11,42,-46,-23,-2,23,-12,-93,9,83,-19,53,-20,22,-23,-51,15,-74,-29,22,-70,-10,-2,-113,-27,-16,30,-53,53,77,-40,3,127,-34,0,52,-31,37,-78,-27,112,-20,-32,-28, 
  /* [2][0][][] */ -3,-17,-64,15,-3,41,30,7,-13,38,0,23,67,-98,12,-62,36,-89,25,37,-23,55,1,22,-15,65,-21,-68,14,3,23,-67,-48,-92,34,-28,112,25,-11,-58,2,26,79,28,127,15,24,20, 
  /* [3][0][][] */ -3,25,-68,38,15,-34,-68,-99,14,-20,-34,2,8,26,28,78,-7,12,-36,24,6,-98,30,-55,-74,-10,127,-14,-42,6,-66,13,-3,-80,14,-11,-24,-40,-22,100,-43,-39,1,18,39,2,-37,43, 
  /* [4][0][][] */ -28,-47,-9,7,32,-28,-14,-10,26,-31,59,-78,2,29,7,9,-21,-25,14,-13,-2,-54,4,-20,18,-11,39,50,35,16,-15,30,-11,0,2,-4,-73,84,32,-24,27,-23,-21,-25,-78,13,127,6, 
  /* [5][0][][] */ 47,-20,4,18,26,-42,34,-127,26,-28,-9,122,-82,71,25,-67,2,-93,15,-1,-36,67,-41,-53,-58,78,-26,4,-22,52,-46,-35,27,55,34,-3,-48,-5,-44,-43,18,-38,-47,-9,-35,59,93,21, 
  /* [6][0][][] */ 50,-22,17,-11,-38,-19,-39,21,-36,10,-44,127,-42,-38,-4,57,13,47,12,38,35,-85,-18,16,28,42,-63,5,10,-45,13,38,1,12,-19,0,12,4,-3,-5,-6,-15,42,57,0,-35,76,-17, 
  /* [7][0][][] */ -27,2,-11,63,25,38,8,32,30,13,72,-2,125,104,63,52,47,49,-12,-1,23,-19,-85,-35,20,-1,-28,65,34,-33,-35,-19,34,6,45,-97,-72,37,39,56,-36,26,89,127,-61,-28,-108,59, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.010494834743440151, 0.0050521455705165863, 0.005884737242013216, 0.0057985382154583931, 0.0086716730147600174, 0.0062222816050052643, 0.0082637974992394447, 0.0063904803246259689, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7786, 14184, -5088, 7124, 238, 3075, -11943, -19427, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00024693729938007891, 0.00011887401342391968, 0.00013846441288478673, 0.00013643619604408741, 0.00020403937378432602, 0.00014640662993770093, 0.00019444229837972671, 0.00015036424156278372, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 60,127,-77,-80,2,95,10,79, 
  /* [1][0][][] */ 52,-80,38,-127,-58,79,-77,-38, 
  /* [2][0][][] */ -34,125,127,55,122,0,50,-2, 
  /* [3][0][][] */ 104,55,-90,57,-12,-115,-127,-34, 
  /* [4][0][][] */ -53,33,18,-82,-26,118,127,50, 
  /* [5][0][][] */ 19,76,-127,-72,45,90,40,-24, 
  /* [6][0][][] */ -8,127,46,49,66,17,7,-80, 
  /* [7][0][][] */ 127,-4,-35,31,18,-2,101,7, 
  /* [8][0][][] */ 55,127,62,83,102,70,88,-86, 
  /* [9][0][][] */ 62,127,-124,-90,6,97,6,75, 
  /* [10][0][][] */ -67,-46,23,-47,-4,-25,-42,127, 
  /* [11][0][][] */ 22,-110,-127,-18,28,-7,29,-4, 
  /* [12][0][][] */ -38,-95,-127,-34,-116,43,-82,58, 
  /* [13][0][][] */ -15,11,-103,110,-127,-18,6,-18, 
  /* [14][0][][] */ -64,-41,-127,-7,34,2,-12,-57, 
  /* [15][0][][] */ 23,-93,-127,6,-108,-29,-35,0, 
  /* [16][0][][] */ 127,-66,-18,67,-83,25,26,102, 
  /* [17][0][][] */ -30,115,127,-22,-46,-10,-27,-16, 
  /* [18][0][][] */ 3,-127,44,73,-6,-76,41,-84, 
  /* [19][0][][] */ 127,-46,-61,44,-104,10,49,115, 
  /* [20][0][][] */ -30,-127,86,78,-14,-84,0,-79, 
  /* [21][0][][] */ -9,-55,-13,-34,127,-2,52,25, 
  /* [22][0][][] */ -127,26,-78,50,50,55,-96,-104, 
  /* [23][0][][] */ -92,-44,59,8,-85,127,107,-51, 
  /* [24][0][][] */ -36,57,-5,-36,-33,118,127,-6, 
  /* [25][0][][] */ -71,-127,-125,-58,-59,-17,-22,-44, 
  /* [26][0][][] */ -4,78,-6,127,-111,25,-67,0, 
  /* [27][0][][] */ 15,-123,30,74,14,-50,6,-127, 
  /* [28][0][][] */ 35,111,54,51,127,-30,30,-48, 
  /* [29][0][][] */ 78,31,-37,-11,71,-127,-86,15, 
  /* [30][0][][] */ 28,-7,36,-127,18,-22,17,-20, 
  /* [31][0][][] */ 46,-43,3,64,-12,28,16,127, 
  /* [32][0][][] */ -77,-64,19,-63,-64,127,59,91, 
  /* [33][0][][] */ -31,44,36,-45,32,127,-107,70, 
  /* [34][0][][] */ 46,127,-95,-64,26,56,-57,57, 
  /* [35][0][][] */ 27,-127,33,60,-21,-62,38,-91, 
  /* [36][0][][] */ -15,-20,-66,-9,-127,-49,-13,10, 
  /* [37][0][][] */ -59,-127,69,77,-47,-85,-11,-60, 
  /* [38][0][][] */ -69,23,63,-73,-127,-85,-60,79, 
  /* [39][0][][] */ 70,-127,86,62,4,-66,-16,-70, 
  /* [40][0][][] */ -4,56,30,46,-127,-16,-60,17, 
  /* [41][0][][] */ 121,127,-93,-120,57,17,-5,19, 
  /* [42][0][][] */ -11,-40,-16,13,127,10,48,19, 
  /* [43][0][][] */ 127,18,77,18,-76,-31,64,100, 
  /* [44][0][][] */ 72,55,-19,15,81,-107,-127,37, 
  /* [45][0][][] */ 49,13,15,20,72,-127,-10,-56, 
  /* [46][0][][] */ 55,-34,-7,127,42,60,20,73, 
  /* [47][0][][] */ -70,-79,42,63,-37,18,127,-62, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0030087644699960947, 0.0025175642222166061, 0.00094784476095810533, 0.0028099282644689083, 0.0031825955957174301, 0.0032720004674047232, 0.0022964354138821363, 0.0011664904886856675, 0.002108671935275197, 0.0032099434174597263, 0.0040025948546826839, 0.0033374775666743517, 0.00078820995986461639, 0.0038140930701047182, 0.0034311825875192881, 0.00070567172951996326, 0.0041936966590583324, 0.0029871631413698196, 0.0039070267230272293, 0.0028528315015137196, 0.0026652670931071043, 0.0028683666605502367, 0.0045227240771055222, 0.00063745625084266067, 0.0021627529058605433, 0.0020211534574627876, 0.00091835373314097524, 0.0036648744717240334, 0.0019138470524922013, 0.0026741584297269583, 0.0074222707189619541, 0.0051049352623522282, 0.00392552325502038, 0.0034987358376383781, 0.0036154109984636307, 0.0040127490647137165, 0.0029811279382556677, 0.0039235334843397141, 0.0031010501552373171, 0.003145506838336587, 0.0024709862191230059, 0.0028895598370581865, 0.0028110756538808346, 0.0024905113968998194, 0.0025255479849874973, 0.0036996742710471153, 0.0043492242693901062, 0.0021260841749608517, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 3175, 5146, 16274, 1505, 2546, -2103, 5529, 13197, 4196, -757, 2982, -2217, 19667, -1991, 2241, 25217, -507, 2405, 96, 3707, 4266, 4241, 676, 28463, 6220, 4852, 18331, 1725, 6608, 4398, 543, 1453, 636, 1884, -252, 123, -3203, -508, 3028, 2521, 5201, 3005, 4592, 5037, 4481, 2962, 2463, 6163, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00018511009693611413, 0.00015488966892007738, 5.8314843045081943e-05, 0.00017287697119172662, 0.00019580480875447392, 0.00020130533084739, 0.0001412850251654163, 7.1766720793675631e-05, 0.00012973313278052956, 0.00019748734484892339, 0.000246254145167768, 0.00020533370843622833, 4.8493533540749922e-05, 0.0002346568217035383, 0.00021109878434799612, 4.3415482650743797e-05, 0.00025801142328418791, 0.00018378109962213784, 0.00024037444381974638, 0.00017551652854308486, 0.0001639768888708204, 0.00017647231288719922, 0.00027825438883155584, 3.921861934941262e-05, 0.00013306039909366518, 0.00012434869131539017, 5.6500448408769444e-05, 0.0002254763530800119, 0.00011774680751841515, 0.00016452390991616994, 0.00045664497883990407, 0.00031407410278916359, 0.00024151241814251989, 0.00021525491320062429, 0.00022243318380787969, 0.00024687885888852179, 0.00018340979295317084, 0.00024138999287970364, 0.00019078784680459648, 0.00019352298113517463, 0.00015202403301373124, 0.00017777619359549135, 0.00017294756253249943, 0.0001532252790639177, 0.00015538086881861091, 0.00022761736181564629, 0.00026758003514260054, 0.00013080440112389624, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 15,-34,10,6,-14,-107,-40,56,-34,-3,-11,4,43,-4,-11,3,92,5,35,-4,0,-25,-69,15,-1,-15,-2,-27,-66,73,-7,-118,44,-2,-57,-64,-8,-36,3,-16,-11,37,15,7,-7,70,127,-36, -127,-99,-22,127,-65,110,-94,127,26,19,12,-3,53,20,-6,-44,-38,59,24,3,6,127,8,127,126,-30,-43,32,59,-127,-4,-87,60,3,-44,-112,26,10,-63,-30,-127,9,-96,-123,34,60,52,126, -13,0,11,8,-25,55,42,48,8,-40,3,6,-18,0,-9,3,-65,35,-56,-35,-7,-34,127,20,-57,3,4,0,1,43,14,7,-5,-15,-48,88,8,12,9,83,28,-27,22,-35,-11,28,-18,-23, 
  /* [0][1][][] */ -7,-6,-27,-4,34,-119,127,-93,-9,10,16,31,127,14,1,-31,-29,-36,31,48,62,-70,48,11,-62,127,-71,-32,127,-103,48,-127,-49,6,-72,7,9,-66,-46,2,126,127,18,-127,-57,-50,0,101, 85,-127,127,-4,127,60,-66,-63,32,127,127,-127,-93,127,127,127,127,127,113,127,127,118,6,6,127,-99,-127,109,31,117,127,2,-127,127,127,127,-127,127,-127,-117,42,33,-127,-34,127,-127,-8,104, 16,26,-40,0,-53,127,-113,107,118,-83,26,62,-35,11,9,-61,17,14,-127,7,20,-123,-38,-1,78,-13,-28,127,-89,-44,31,-42,-29,16,94,-17,38,-1,-4,-75,114,-9,29,49,-60,90,102,-85, 
  /* [0][2][][] */ 2,41,7,-29,-2,-79,-13,-15,4,-7,0,-1,-11,-12,0,0,-54,9,19,-32,8,-25,96,-12,-111,6,39,-19,13,-11,1,27,-11,-12,-55,28,-4,-4,13,40,-21,-4,12,7,-23,20,-9,18, 29,-10,-33,-33,24,21,121,-91,127,-33,-7,3,-69,-18,-21,-69,-21,89,0,36,14,29,-18,-30,-67,57,74,-15,-99,14,-34,-15,-29,0,-30,11,53,-19,-3,127,-116,-6,-14,63,30,52,13,-127, -11,30,5,-16,-18,-5,-5,-28,-34,-24,-16,6,14,-9,-9,17,48,36,-24,-17,-8,-31,-48,-12,30,-27,20,-12,-22,-3,-8,4,26,-19,-34,-43,-9,7,32,13,-6,-10,9,10,-21,2,67,-61, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.012302719987928867, 0.0070016728714108467, 0.029849251732230186, 0.01035359688103199, 0.0089082960039377213, 0.0096982307732105255, 0.0095075583085417747, 0.012538655661046505, 0.004071003757417202, 0.0097499024122953415, 0.010170608758926392, 0.046409796923398972, 0.018380602821707726, 0.02983422763645649, 0.016786854714155197, 0.030193379148840904, 0.0063831345178186893, 0.0030259545892477036, 0.008972490206360817, 0.012872804887592793, 0.011011127382516861, 0.0091151678934693336, 0.0032590155024081469, 0.020601026713848114, 0.0068294624797999859, 0.014632402919232845, 0.022242356091737747, 0.0089529454708099365, 0.010250495746731758, 0.014097770676016808, 0.0063734673894941807, 0.0049178744666278362, 0.0052025998011231422, 0.0084968851879239082, 0.0074130119755864143, 0.012101969681680202, 0.07840263843536377, 0.013450853526592255, 0.0062636383809149265, 0.0086756618693470955, 0.0070424345321953297, 0.0067420424893498421, 0.012020842172205448, 0.0085684275254607201, 0.013741493225097656, 0.0038119277451187372, 0.0026012198068201542, 0.0061254086904227734, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 306, 8589, -751, -547, 1070, -1493, 1041, -2002, -4162, 487, -5482, 5, -580, -753, -2092, 3962, 8612, 2401, -307, -3851, -7087, 1204, 19739, -4845, -2994, -587, 5626, -5443, 1279, 1299, -8055, 10555, 6610, -126, 3571, -339, 25, -779, 10808, -935, 5277, -2426, 3010, 5194, -722, 9186, -939, -693, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00028947577811777592, 0.0001647452445467934, 0.00070233532460406423, 0.00024361404939554632, 0.00020960696565452963, 0.00022819367586635053, 0.00022370726219378412, 0.00029502718825824559, 9.5788323960732669e-05, 0.00022940947383176535, 0.00023930844326969236, 0.0010919952765107155, 0.00043248478323221207, 0.00070198182947933674, 0.00039498481783084571, 0.00071043247589841485, 0.00015019140846561641, 7.1198934165295213e-05, 0.00021111742535140365, 0.00030288952984847128, 0.00025908535462804139, 0.00021447453764267266, 7.6682721555698663e-05, 0.00048473005881533027, 0.00016069323464762419, 0.00034429185325279832, 0.0005233495612628758, 0.00021065754117444158, 0.00024118814326357096, 0.0003317122464068234, 0.0001499639474786818, 0.00011571469804039225, 0.0001224141160491854, 0.00019992671150248498, 0.00017442381067667156, 0.00028475222643464804, 0.0018447679467499256, 0.00031649068114347756, 0.00014737973106093705, 0.00020413321908563375, 0.00016570434672757983, 0.00015863629232626408, 0.00028284336440265179, 0.00020161006250418723, 0.00032332926639355719, 8.9692417532205582e-05, 6.1205173551570624e-05, 0.00014412726159207523, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -34,-41,-17,-60,5,-10,75,89,-94,-85,-27,15,-50,-14,-58,36,-82,11,14,127,58,-32,15,92,75,78,25,2,-89,-48,-73,-56,-56,95,36,-54,34,-28,90,-9,18,0,2,-92,37,-27,-26,-74, 
  /* [1][0][][] */ -12,49,-21,-27,-68,64,-15,-51,-31,65,-22,17,58,44,-50,-5,-16,-113,71,-45,127,7,-56,29,59,-1,-83,58,40,-12,70,34,-29,-19,0,-18,6,99,-16,-21,64,43,-2,11,106,10,-30,60, 
  /* [2][0][][] */ -22,-37,113,4,83,-43,-11,24,-32,-4,-14,48,13,-38,-42,-127,-50,-94,-25,17,-94,19,-34,-28,-48,13,4,-47,-39,6,-28,-10,5,-8,28,-9,27,-34,-47,7,31,-31,33,-48,-45,-46,-63,-43, 
  /* [3][0][][] */ 42,17,58,11,19,-35,30,55,-50,-33,47,-29,-69,51,-20,50,65,30,-29,27,-100,-75,127,0,3,6,-62,-26,-48,66,103,-64,3,-105,-19,32,-8,-63,-13,68,-80,-61,56,-4,-91,-64,59,-8, 
  /* [4][0][][] */ 18,-17,65,-29,7,-12,-6,-8,-55,-6,-26,2,39,-71,39,-94,39,43,-9,-31,8,29,14,8,-2,0,52,-15,20,21,-127,-13,-28,-21,3,18,43,-4,36,3,-37,-10,-68,30,-19,-92,3,19, 
  /* [5][0][][] */ 24,-47,63,25,25,15,31,-4,-75,-7,-47,26,35,9,11,-51,89,75,0,-18,89,-55,127,-82,-21,43,4,48,13,14,-35,-49,-13,-42,-38,15,38,31,69,5,-73,33,28,21,53,-21,78,-3, 
  /* [6][0][][] */ -53,55,-122,96,57,12,37,24,-24,-11,68,-82,-90,-23,-29,31,-114,32,-12,101,27,59,-89,-94,-6,-18,26,86,-37,-41,-42,11,36,69,-51,-26,-14,-4,82,5,79,63,-127,-68,-36,127,-62,-31, 
  /* [7][0][][] */ 33,73,-87,15,14,59,118,68,48,77,-116,-14,-40,11,-73,-55,22,37,123,103,78,12,127,31,100,100,-49,100,-76,34,-8,-74,26,-72,-32,34,-5,100,-65,84,-59,50,-3,-86,83,-17,52,-42, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0043247072026133537, 0.0046447888016700745, 0.0068368609063327312, 0.005347872618585825, 0.0055575631558895111, 0.0052446871995925903, 0.0033519288990646601, 0.0036019962280988693, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 2099, -502, 22087, -4392, 5492, -15300, 1132, -14123, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00010175781790167093, 0.00010928914707619697, 0.00016086731920950115, 0.00012583230272866786, 0.00013076618779450655, 0.00012340440298430622, 7.8868913988117129e-05, 8.4752857219427824e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 70,38,127,-37,64,108,-80,-57, 
  /* [1][0][][] */ 7,-82,-127,1,49,21,33,1, 
  /* [2][0][][] */ -127,-1,-53,-24,46,25,-69,-34, 
  /* [3][0][][] */ 53,73,127,-75,-15,-110,-8,-18, 
  /* [4][0][][] */ -127,17,-55,-31,42,6,-47,-65, 
  /* [5][0][][] */ -101,28,-62,-13,14,39,-81,-127, 
  /* [6][0][][] */ -40,-127,-116,44,100,15,10,48, 
  /* [7][0][][] */ -65,-127,-101,-81,-75,-77,21,92, 
  /* [8][0][][] */ 83,29,-13,-2,99,-73,-127,7, 
  /* [9][0][][] */ -39,49,-51,94,-61,-35,127,-28, 
  /* [10][0][][] */ -28,126,36,64,127,-23,-7,50, 
  /* [11][0][][] */ -83,-31,-20,-16,-89,94,127,-6, 
  /* [12][0][][] */ 66,37,-127,39,-7,-31,-65,-10, 
  /* [13][0][][] */ 71,-35,-72,14,9,-127,-24,-19, 
  /* [14][0][][] */ 22,-85,67,18,127,-102,-54,24, 
  /* [15][0][][] */ -39,-39,0,127,62,80,-72,30, 
  /* [16][0][][] */ 109,29,-37,20,71,-104,-127,-32, 
  /* [17][0][][] */ 58,127,56,74,44,67,25,-81, 
  /* [18][0][][] */ 35,-21,8,0,127,5,30,-14, 
  /* [19][0][][] */ 15,127,32,17,-115,20,21,-32, 
  /* [20][0][][] */ -44,17,63,-127,29,34,-16,93, 
  /* [21][0][][] */ -32,80,46,-127,28,46,-4,115, 
  /* [22][0][][] */ -73,-62,-99,17,-127,109,102,-21, 
  /* [23][0][][] */ 104,31,-127,20,16,-44,-66,-21, 
  /* [24][0][][] */ -54,41,-1,-1,-30,68,-127,96, 
  /* [25][0][][] */ -102,-51,-127,11,-61,-67,69,102, 
  /* [26][0][][] */ 46,-8,-42,-40,109,-18,127,-45, 
  /* [27][0][][] */ 127,-73,27,108,1,31,-21,110, 
  /* [28][0][][] */ 41,57,54,-4,127,-52,53,-32, 
  /* [29][0][][] */ -15,-10,-26,-33,-61,13,127,-28, 
  /* [30][0][][] */ 43,-127,-57,-75,-115,-8,5,-68, 
  /* [31][0][][] */ 9,30,-8,-9,-127,12,-29,-8, 
  /* [32][0][][] */ 35,-60,-63,85,-5,-83,110,-127, 
  /* [33][0][][] */ 46,127,51,34,44,-22,-19,-17, 
  /* [34][0][][] */ -120,-37,127,-5,-13,106,97,7, 
  /* [35][0][][] */ -26,62,127,-19,-69,-76,-47,20, 
  /* [36][0][][] */ -97,2,108,-18,-13,127,91,27, 
  /* [37][0][][] */ -25,-73,-7,-127,-39,-77,67,48, 
  /* [38][0][][] */ 41,-13,87,-56,57,54,-127,11, 
  /* [39][0][][] */ -13,96,-127,-40,-22,3,7,86, 
  /* [40][0][][] */ 59,-48,21,34,10,-3,4,127, 
  /* [41][0][][] */ -36,70,127,-14,17,80,-51,9, 
  /* [42][0][][] */ 60,-127,-122,-21,-109,10,24,-96, 
  /* [43][0][][] */ -7,-95,35,-81,127,-46,15,44, 
  /* [44][0][][] */ 21,127,122,18,11,52,-85,24, 
  /* [45][0][][] */ -42,37,7,81,-117,68,-127,22, 
  /* [46][0][][] */ -43,-43,60,47,-127,-124,-35,-4, 
  /* [47][0][][] */ -18,59,42,-115,-127,34,-23,56, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0024272417649626732, 0.0034069598186761141, 0.0031075598672032356, 0.0026004828978329897, 0.0019587602000683546, 0.0021743974648416042, 0.0019480255432426929, 0.0015217061154544353, 0.0034346454776823521, 0.0039279726333916187, 0.0023044135887175798, 0.0024153951089829206, 0.0037453684490174055, 0.0032613812945783138, 0.0031535346060991287, 0.0017122075660154223, 0.0029546478763222694, 0.0022660361137241125, 0.0016045834636315703, 0.0035239816643297672, 0.0041574151255190372, 0.0030346685089170933, 0.002617263700813055, 0.0021653950680047274, 0.0028993594460189342, 0.002465009456500411, 0.0030771035235375166, 0.0026796767488121986, 0.0012169006513431668, 0.0036969641223549843, 0.0020160621497780085, 0.0018137064762413502, 0.0026179926935583353, 0.0024788458831608295, 0.002452565124258399, 0.0029554048087447882, 0.0025238890666514635, 0.0028158947825431824, 0.0026555352378636599, 0.0021351843606680632, 0.0028847875073552132, 0.0014491893816739321, 0.0016002984484657645, 0.0030134031549096107, 0.001315966947004199, 0.002705305116251111, 0.0024733957834541798, 0.0026054445188492537, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 2091, -1212, 916, -1987, 4965, -806, 4835, -4368, 1049, 444, 2221, 3641, 363, -502, 603, 5715, -1872, 4192, 6906, 664, -746, 2312, -768, 4395, 1755, 1901, 1138, -1027, 9488, -477, 2639, -2333, -776, 3740, -1270, 2148, 2115, 1040, 508, 4334, 2434, 7269, -4235, 1573, 8025, 230, 2645, 2612, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00019939408230129629, 0.00027987637440674007, 0.00025528116384521127, 0.00021362557890824974, 0.00016090906865429133, 0.00017862333334051073, 0.00016002723714336753, 0.00012500575394369662, 0.00028215072234161198, 0.00032267675851471722, 0.00018930394435301423, 0.00019842090841848403, 0.00030767612042836845, 0.00026791734853759408, 0.00025905790971592069, 0.00014065516006667167, 0.00024271967413369566, 0.00018615130102261901, 0.0001318139984505251, 0.00028948954422958195, 0.00034152509761042893, 0.00024929322535172105, 0.00021500409638974816, 0.00017788379045668989, 0.00023817781766410917, 0.00020249663793947548, 0.00025277919485233724, 0.00022013123088981956, 9.9966469861101359e-05, 0.00030369978048838675, 0.00016561633674427867, 0.00014899313100613654, 0.00021506397752091289, 0.00020363328803796321, 0.00020147436589468271, 0.00024278185446746647, 0.00020733350538648665, 0.00023132131900638342, 0.00021814803767483681, 0.00017540203407406807, 0.00023698074801359326, 0.00011904862913070247, 0.00013146200217306614, 0.00024754632613621652, 0.00010810461390065029, 0.00022223655832931399, 0.00020318556926213205, 0.00021403316350188106, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -99,61,-127,70,-112,66,-70,60,-72,-73,58,-47,73,-74,-47,-59,60,75,85,-114,105,-100,64,-90,-112,-69,62,115,-107,-58,-98,60,64,-93,74,-86,-106,-80,85,-20,-7,-91,83,-73,123,48,-86,-65, -89,121,-63,90,-83,121,-68,108,-124,-90,91,-72,94,-78,-73,-80,96,110,127,-127,99,-107,90,-125,-115,-92,79,127,30,-91,-104,93,88,-127,88,-127,-105,-99,107,-81,-101,117,66,-112,-45,94,-112,-102, -66,66,-2,21,-2,59,-37,21,-55,-50,42,-27,34,-30,-24,-15,29,41,62,-38,39,-35,36,-42,-68,-42,27,32,94,-29,-43,9,34,-80,37,-39,-24,-19,34,-36,-125,-29,30,-44,-70,70,-34,-65, 
  /* [0][1][][] */ -127,120,-61,101,-59,112,-126,105,-70,-89,71,-96,108,-121,-66,-107,98,107,-55,-88,127,-127,91,-100,-127,-64,92,125,-127,-95,-113,127,104,31,75,-116,-116,-127,95,-54,-127,-127,127,-127,127,60,-116,-98, -122,127,-87,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-59,-100,121,-94,127,-127,-126,-127,127,125,18,-127,-127,96,127,39,127,-119,-127,-116,127,-127,-125,124,125,-81,-84,127,-127,-127, -71,95,-67,26,-44,29,-60,46,-74,-45,48,-56,63,-67,-53,-8,68,48,-48,-36,18,-37,45,-40,-111,-62,46,57,97,-52,-49,81,40,5,57,-28,-22,-8,60,-82,-66,-58,18,-27,-82,83,-12,-80, 
  /* [0][2][][] */ -50,77,-3,28,-36,40,-81,18,-54,-49,29,-43,20,-71,-39,-62,49,41,-84,-35,34,-33,34,-29,-53,-34,30,6,-75,-74,-29,49,17,51,58,-39,-73,-45,24,-32,-123,-69,29,-81,78,29,-44,-51, -93,78,-65,59,-79,41,-93,17,-71,-60,43,-58,52,-65,-82,-64,72,58,-100,-34,8,-42,22,-37,-81,-53,43,34,1,-75,-76,68,31,69,62,-50,-75,-28,29,-30,-69,72,57,-101,-55,61,-53,-74, -17,42,-72,11,-40,16,-44,0,-19,6,22,-30,30,-29,-48,2,54,26,-75,-19,-14,4,9,-4,-56,-20,17,2,60,-17,-45,34,25,35,30,19,2,1,16,-29,-14,-15,-11,4,-54,49,-6,-69, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0037947541568428278, 0.0036030604969710112, 0.0035092406906187534, 0.0068573863245546818, 0.0048003173433244228, 0.0037030316889286041, 0.001887426245957613, 0.011728487908840179, 0.0047188396565616131, 0.0027548922225832939, 0.0030981779564172029, 0.0047292839735746384, 0.0035985000431537628, 0.0048419930972158909, 0.0020654827821999788, 0.0032350625842809677, 0.0053235525265336037, 0.00289164949208498, 0.0059803100302815437, 0.0018729357980191708, 0.0039315400645136833, 0.0033488054759800434, 0.0049857017584145069, 0.0053318166173994541, 0.002625657245516777, 0.0035625200252979994, 0.0030875953380018473, 0.0017494650091975927, 0.010161713697016239, 0.0047189318574965, 0.0027465489692986012, 0.013337115757167339, 0.0059140697121620178, 0.0075569748878479004, 0.0044750496745109558, 0.0037725381553173065, 0.0039759818464517593, 0.0030426268931478262, 0.0044989846646785736, 0.0053828926756978035, 0.0021946309134364128, 0.007043890655040741, 0.01098500844091177, 0.003647845471277833, 0.0059461859054863453, 0.002695772098377347, 0.0020100760739296675, 0.0024342958349734545, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 15516, -1410, 16783, -677, 16208, -2014, 43198, 328, 11011, 32389, 1008, 22338, -894, 11534, 35463, 25242, -553, -1207, 4794, 49788, -937, 16704, 166, 16448, 19511, 30755, -902, -1620, -1166, 13102, 21372, -292, -180, 544, 84, 14658, 11534, 25756, 623, 15066, 30208, 1014, 761, 13788, 1392, 802, 41116, 27129, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.9288332674186677e-05, 8.4777893789578229e-05, 8.2570368249434978e-05, 0.00016135026817210019, 0.00011294864816591144, 8.7130159954540431e-05, 4.4410029659047723e-05, 0.00027596444124355912, 0.00011103152064606547, 6.4820997067727149e-05, 7.2898306825663894e-05, 0.00011127727339044213, 8.4670587966684252e-05, 0.00011392925080144778, 4.8599595174891874e-05, 7.6119118602946401e-05, 0.00012526006321422756, 6.8038811150472611e-05, 0.00014071317855268717, 4.4069078285247087e-05, 9.2506823420990258e-05, 7.8795426816213876e-05, 0.00011731062841136009, 0.000125454505905509, 6.1780170653946698e-05, 8.3824001194443554e-05, 7.2649301728233695e-05, 4.116388299735263e-05, 0.00023909915762487799, 0.00011103369615739211, 6.4624684455338866e-05, 0.00031381449662148952, 0.00013915458112023771, 0.00017781117639970034, 0.00010529528663028032, 8.8765606051310897e-05, 9.3552516773343086e-05, 7.1591224696021527e-05, 0.00010585846757749096, 0.00012665630492847413, 5.1638377044582739e-05, 0.00016573860193602741, 0.000258470798144117, 8.5831663454882801e-05, 0.0001399102620780468, 6.3429935835301876e-05, 4.7295907279476523e-05, 5.727754978579469e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 28,45,20,-35,79,72,-40,57,-14,117,1,51,-32,33,-13,42,37,76,37,-67,-69,75,-11,50,50,41,36,61,-44,-45,-10,90,-31,7,-71,51,51,-127,-38,9,13,-27,55,-5,1,-51,-66,-18, 
  /* [1][0][][] */ -53,-2,-83,-42,8,84,-57,19,-14,-34,-42,29,55,-12,-29,-28,-32,-32,-8,22,-62,41,-100,-44,-56,-42,48,67,-22,-33,43,-43,7,-57,-33,47,10,-56,127,-40,-25,28,-48,-17,32,50,32,15, 
  /* [2][0][][] */ 5,1,60,-29,-13,-72,21,23,94,81,-63,19,114,-55,127,85,-66,-19,-25,28,89,-80,-42,-98,17,-33,34,-67,41,53,-46,17,32,-32,57,39,-66,13,2,-28,35,38,63,-15,22,-82,93,-59, 
  /* [3][0][][] */ 41,9,-28,-25,33,118,18,-18,43,-48,21,-21,-49,8,12,45,-44,-69,38,-126,-3,-4,-29,-18,-42,92,127,63,-10,-36,25,46,59,-32,93,36,-46,-56,1,38,32,15,-20,2,26,24,-10,-26, 
  /* [4][0][][] */ 99,-7,12,-52,92,86,43,17,63,-16,-103,27,40,-21,11,-19,-100,-123,-24,-86,-16,21,-33,-30,-85,124,-98,127,-61,-59,29,78,42,-47,19,-28,-6,9,-22,32,-54,-3,1,48,-54,107,-26,-48, 
  /* [5][0][][] */ 0,-1,-59,7,-14,57,21,-26,61,49,36,87,54,-22,34,-2,-43,127,-19,35,17,-6,-62,-13,33,-5,-64,-32,-19,28,17,-15,-39,4,46,13,-48,9,-82,1,88,-20,22,50,-13,10,-34,29, 
  /* [6][0][][] */ 65,14,19,73,5,-23,107,-49,2,75,126,108,43,44,-49,66,33,-46,-69,94,53,-60,-50,63,-86,98,87,-7,118,58,-37,-2,103,-71,-127,-2,107,30,3,5,19,66,64,-34,66,127,33,-9, 
  /* [7][0][][] */ -94,-12,-24,28,-65,-55,31,45,83,116,-59,-70,-94,9,-14,-10,-81,94,4,114,-44,37,19,38,-20,-93,-34,-84,22,42,-9,13,-19,9,13,-21,10,-62,127,12,5,47,24,-8,55,74,-34,-9, 
  /* [8][0][][] */ -11,-95,55,-62,66,-58,71,-35,-31,-121,34,11,-36,3,26,24,2,10,-48,108,6,37,-20,37,64,-11,-66,-32,-127,-21,-53,-120,4,-62,7,83,-9,39,116,25,17,-10,71,119,-18,-74,-44,91, 
  /* [9][0][][] */ 29,-42,25,-65,33,82,-40,62,24,-43,-35,-23,16,-42,121,-16,1,-121,43,51,-72,41,64,-32,-26,-88,-27,77,64,71,-39,-36,-56,31,-7,127,-28,-52,-62,-28,-28,-5,30,110,61,81,-68,11, 
  /* [10][0][][] */ -14,15,-24,-9,17,26,-69,-37,48,38,64,-11,-36,-6,47,-53,-59,127,-5,55,0,-12,23,31,-45,41,4,90,39,3,-33,-14,69,11,-8,26,-10,-49,-39,19,-82,-6,25,-18,14,43,32,33, 
  /* [11][0][][] */ -31,48,-23,41,29,59,0,11,17,16,-127,-73,72,22,-10,-49,-1,28,-45,-48,-8,-12,111,9,45,7,-19,34,-8,28,-6,49,24,-3,-46,-4,41,85,105,17,32,-36,60,-2,-53,-17,89,-1, 
  /* [12][0][][] */ -63,3,36,19,-58,-52,2,4,-35,-32,-127,19,71,-98,20,35,44,101,81,-118,-30,45,-43,-80,3,-13,34,-28,6,17,-21,77,69,76,36,-29,-52,-27,31,3,-28,18,61,-2,38,-12,-37,-31, 
  /* [13][0][][] */ -62,-114,-53,-103,-1,23,59,6,-127,22,123,-65,55,47,125,4,111,27,4,-92,78,-87,117,0,-83,3,-18,6,-45,-100,-105,11,43,-29,-74,60,27,-54,79,-83,-12,59,64,40,63,-25,113,-70, 
  /* [14][0][][] */ 67,27,-55,4,-36,22,-86,-25,-28,57,50,48,-9,-63,16,-42,46,-111,23,11,86,-56,19,-6,-7,125,-83,5,-59,-21,-96,4,127,41,85,-19,-82,13,-27,60,-10,-50,105,-24,-51,-42,-55,55, 
  /* [15][0][][] */ -70,14,44,20,97,0,-1,36,17,74,-10,53,53,-10,-37,-23,14,44,-3,-35,23,-39,-49,-52,48,-64,-35,66,-25,4,21,3,-63,3,127,0,-94,17,57,-19,-51,-15,16,-9,-32,-34,-7,12, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0061561292968690395, 0.0061367424204945564, 0.0059946635738015175, 0.006987858098000288, 0.0042081447318196297, 0.006491383071988821, 0.0047602723352611065, 0.0064088343642652035, 0.00467349449172616, 0.0038785387296229601, 0.0063204974867403507, 0.00671773636713624, 0.0053493534214794636, 0.0035596562083810568, 0.0056419996544718742, 0.0047874506562948227, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -4015, 12063, -20529, 1019, 11075, -15018, -43130, -7757, -6064, 8360, -15383, -13043, 5062, -10719, -4000, -2654, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.0001448500988772139, 0.00014439393999055028, 0.00014105091395322233, 0.00016442019841633737, 9.9015174782834947e-05, 0.00015273843018803746, 0.00011200641165487468, 0.00015079609875101596, 0.00010996458149747923, 9.1259738837834448e-05, 0.00014871759049128741, 0.00015806438750587404, 0.00012586714001372457, 8.3756618550978601e-05, 0.00013275293167680502, 0.00011264590284554288, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 46,13,-2,49,-127,-14,89,43,60,87,-27,45,12,-3,40,74, 
  /* [1][0][][] */ -21,43,-105,-2,127,108,-5,2,-31,16,-54,40,-68,80,-68,-51, 
  /* [2][0][][] */ -45,67,71,-1,70,89,-4,36,41,-7,48,-11,47,-127,-10,14, 
  /* [3][0][][] */ 127,-38,19,1,52,49,-3,1,31,36,-70,-20,-32,49,-42,71, 
  /* [4][0][][] */ -77,-28,22,38,-127,-7,-84,-43,-2,25,-23,-75,-18,10,-38,117, 
  /* [5][0][][] */ -101,4,36,15,127,29,15,12,-45,17,-32,4,-62,55,-88,-36, 
  /* [6][0][][] */ -127,9,-46,22,-11,-65,67,24,4,-30,-49,30,1,-3,-49,3, 
  /* [7][0][][] */ 10,108,64,-83,69,41,127,22,77,-17,-7,66,118,33,-11,2, 
  /* [8][0][][] */ -49,-20,-89,74,-60,90,-50,-75,38,-49,95,42,127,57,-102,15, 
  /* [9][0][][] */ -34,-127,-20,71,-47,-66,-9,68,42,41,2,52,-80,14,-10,-37, 
  /* [10][0][][] */ -43,-68,-91,45,-127,111,49,-91,13,-77,38,-63,45,106,-76,67, 
  /* [11][0][][] */ -46,-76,2,21,11,82,33,-12,27,31,18,-64,26,127,-98,112, 
  /* [12][0][][] */ -26,-121,-102,98,-121,-127,33,71,99,72,-37,122,-1,-96,-33,-17, 
  /* [13][0][][] */ -66,-25,-30,-5,-15,2,24,18,-16,127,-9,-25,35,32,11,-14, 
  /* [14][0][][] */ -122,-48,-50,-64,-6,76,-30,-107,127,-57,54,1,105,-49,-90,-87, 
  /* [15][0][][] */ 6,-127,102,-56,-55,-34,13,56,20,-51,-98,-37,92,-42,-25,-50, 
  /* [16][0][][] */ -22,-31,15,-37,30,26,-15,-23,61,-127,40,-18,-7,-2,-68,-82, 
  /* [17][0][][] */ -34,19,37,-73,16,-6,-54,3,127,-72,25,88,116,-66,-13,-109, 
  /* [18][0][][] */ 90,-1,-27,-126,-7,-36,106,-35,16,66,-18,51,-18,55,15,-127, 
  /* [19][0][][] */ -38,-42,-37,-53,-111,54,-22,15,25,-51,39,-127,-11,-19,-26,2, 
  /* [20][0][][] */ 14,72,63,-100,71,-8,-56,89,-101,-127,31,-102,-49,108,-31,-34, 
  /* [21][0][][] */ 2,-109,-127,-11,95,19,60,105,-48,-70,1,29,74,-93,-33,13, 
  /* [22][0][][] */ 62,-14,65,-4,4,11,64,28,29,117,32,20,0,-1,127,-8, 
  /* [23][0][][] */ -127,-63,-32,37,52,25,9,14,13,1,16,-73,6,79,55,112, 
  /* [24][0][][] */ 7,-35,49,23,15,-96,0,-43,43,127,-114,61,-35,-81,66,-84, 
  /* [25][0][][] */ 123,-39,97,127,30,-8,-28,39,-119,83,69,-53,-31,34,81,-11, 
  /* [26][0][][] */ -19,24,13,42,-55,110,-15,35,-57,-36,-80,35,1,16,51,-127, 
  /* [27][0][][] */ 33,-8,-10,-57,-55,-2,-90,10,-100,-24,-75,-54,-82,43,-32,127, 
  /* [28][0][][] */ -86,21,17,-12,24,-6,-127,3,8,-43,4,-14,11,-50,-93,-28, 
  /* [29][0][][] */ -31,-119,-32,89,-39,11,127,16,72,48,-110,59,22,-39,-56,76, 
  /* [30][0][][] */ 39,-46,-66,13,-127,31,48,-27,19,-8,11,-23,-25,46,-12,76, 
  /* [31][0][][] */ -127,-17,11,96,-49,19,-44,-6,-52,-63,13,-45,-35,-60,-39,92, 
  /* [32][0][][] */ -127,-83,-96,-7,-88,-35,11,-17,109,48,-52,-64,36,32,18,-14, 
  /* [33][0][][] */ -16,5,-101,34,-127,-97,48,0,-103,14,-51,-63,-21,103,66,75, 
  /* [34][0][][] */ 41,65,17,52,-74,-46,25,12,30,-127,-9,48,-37,-8,41,90, 
  /* [35][0][][] */ 27,10,-68,-31,-127,21,101,-49,28,68,-21,-18,21,91,33,80, 
  /* [36][0][][] */ -3,11,-51,61,127,-26,42,60,-78,20,-78,-74,27,-13,8,23, 
  /* [37][0][][] */ -120,56,-16,-71,35,-91,-53,-29,0,-37,-9,59,54,-91,16,-127, 
  /* [38][0][][] */ 57,110,35,-69,-117,-49,-127,-78,-30,-71,48,89,-53,-104,90,-7, 
  /* [39][0][][] */ -13,-42,12,56,21,85,77,-36,-14,54,16,-27,-13,127,24,111, 
  /* [40][0][][] */ 117,51,86,103,-57,-69,2,34,-97,69,1,-17,-56,-39,127,-3, 
  /* [41][0][][] */ -18,-18,8,61,-84,120,4,55,-44,29,-112,16,24,34,55,-127, 
  /* [42][0][][] */ 6,-89,6,-13,127,22,65,18,-23,-90,-92,-30,-1,-10,-11,33, 
  /* [43][0][][] */ -56,-108,-59,3,117,10,-17,110,-75,-84,-127,-98,112,-3,-67,59, 
  /* [44][0][][] */ -33,-56,-88,-90,32,91,66,24,-42,-127,-61,77,-48,52,33,86, 
  /* [45][0][][] */ -6,-54,-52,-12,-127,43,-44,-69,62,-24,39,-24,0,3,-41,37, 
  /* [46][0][][] */ 29,-69,-21,6,97,-81,-32,79,9,-16,38,75,-51,-58,61,-127, 
  /* [47][0][][] */ -61,-17,-8,91,-18,5,31,28,5,127,83,95,-58,81,-5,90, 
  /* [48][0][][] */ 45,-9,-81,-95,34,-75,4,46,45,-75,-7,21,-59,4,-40,-127, 
  /* [49][0][][] */ 54,23,9,15,0,-37,48,49,-34,127,-51,22,-32,-36,65,79, 
  /* [50][0][][] */ -2,-10,8,9,-127,-12,-15,-39,53,17,26,49,-31,-65,10,-9, 
  /* [51][0][][] */ 7,1,-16,-127,-17,90,34,-41,21,12,41,-38,48,77,-25,15, 
  /* [52][0][][] */ 31,-12,4,-80,67,-96,-1,-36,39,-1,127,-52,37,-8,-25,83, 
  /* [53][0][][] */ -57,-73,48,-30,-38,-127,30,-120,-3,100,-117,81,-38,-18,31,-96, 
  /* [54][0][][] */ 78,78,79,-47,-127,-48,-84,-124,-21,35,32,74,-78,-52,74,-2, 
  /* [55][0][][] */ 13,8,-34,63,-30,22,35,-19,8,127,22,64,1,8,-1,45, 
  /* [56][0][][] */ 34,-124,-55,81,-78,60,-9,65,127,7,49,53,-23,-22,37,92, 
  /* [57][0][][] */ 30,14,69,-80,106,2,-21,5,100,-37,13,127,54,-52,99,-46, 
  /* [58][0][][] */ 71,-40,19,-73,29,19,2,127,42,87,2,66,51,14,78,8, 
  /* [59][0][][] */ -58,27,23,-41,6,-96,1,19,17,13,-119,-113,-127,-59,86,-2, 
  /* [60][0][][] */ 60,-21,20,42,17,-11,33,-64,14,127,-12,58,-12,-31,-8,-30, 
  /* [61][0][][] */ 72,63,28,-24,-89,-127,-9,-71,-98,-16,-37,1,-55,-53,67,79, 
  /* [62][0][][] */ -35,86,-33,35,-66,127,-58,44,-89,12,-59,40,-26,51,61,-95, 
  /* [63][0][][] */ 32,-17,-75,-127,-19,-52,102,-6,-15,-116,-32,27,-39,86,36,-31, 
  /* [64][0][][] */ -47,21,8,-26,40,-67,26,80,-127,-23,-66,-48,-41,74,58,58, 
  /* [65][0][][] */ -67,-18,-50,-18,59,25,-49,-74,-111,-66,15,-27,-121,127,-45,63, 
  /* [66][0][][] */ -27,54,-7,40,-41,127,-31,24,-55,17,-34,42,-33,53,42,-81, 
  /* [67][0][][] */ 6,-30,-63,-23,10,-90,69,-82,2,5,27,127,-75,-25,-22,-100, 
  /* [68][0][][] */ 10,-127,-27,79,-9,-4,27,69,34,29,34,5,-56,36,-10,-12, 
  /* [69][0][][] */ 6,83,86,-127,61,-1,-29,80,41,112,50,89,92,-81,37,-108, 
  /* [70][0][][] */ 40,37,42,-34,81,8,-88,-41,-127,-90,3,43,-33,67,-100,0, 
  /* [71][0][][] */ -35,-77,36,-50,89,-8,50,49,-86,84,-127,-49,25,119,-19,77, 
  /* [72][0][][] */ 2,36,48,12,-66,-27,-107,-75,-5,62,-18,59,22,119,-127,2, 
  /* [73][0][][] */ -7,-49,-12,-58,52,-124,40,-44,68,110,116,-18,11,-20,-95,127, 
  /* [74][0][][] */ 2,5,-29,71,-82,-5,94,26,74,71,30,124,127,27,-66,12, 
  /* [75][0][][] */ -34,31,-19,21,-41,127,-9,13,-33,28,-46,38,-13,41,11,-75, 
  /* [76][0][][] */ -65,85,-69,51,-115,-1,-3,24,49,38,-45,-43,46,-54,-127,36, 
  /* [77][0][][] */ 115,127,-107,124,80,69,68,53,48,18,96,-26,76,34,62,9, 
  /* [78][0][][] */ 16,-45,-6,-58,68,-127,27,-43,58,45,120,-22,4,-14,-42,111, 
  /* [79][0][][] */ -37,66,5,22,-1,-43,-26,-2,-127,-7,46,9,103,47,-78,-39, 
  /* [80][0][][] */ -79,41,63,17,70,59,9,-127,-69,36,-49,-37,-23,-83,37,83, 
  /* [81][0][][] */ 73,66,-28,-6,34,-26,71,111,-116,127,-66,-51,-58,22,99,108, 
  /* [82][0][][] */ 55,109,-29,-67,-4,-58,120,-86,27,18,-76,78,127,-11,74,-40, 
  /* [83][0][][] */ -2,-38,10,22,10,31,-36,-106,75,-25,97,24,43,-67,-52,-127, 
  /* [84][0][][] */ -127,-88,-51,-31,-22,112,81,-2,99,66,113,110,51,62,-90,2, 
  /* [85][0][][] */ 127,2,113,-77,73,-2,-18,86,23,115,-70,4,-38,57,117,8, 
  /* [86][0][][] */ -81,66,-38,-4,28,81,13,23,89,37,127,-26,-30,59,-13,-17, 
  /* [87][0][][] */ 11,-60,25,-44,43,-127,29,-37,47,-10,66,-39,33,-46,-42,70, 
  /* [88][0][][] */ -99,70,37,-17,118,-18,38,25,-73,-67,111,-67,49,121,99,-127, 
  /* [89][0][][] */ -28,38,-16,31,-28,127,-12,30,-41,5,-35,14,-4,53,20,-74, 
  /* [90][0][][] */ 52,-95,22,33,127,-4,47,38,-13,-97,-114,-29,-15,-18,-65,28, 
  /* [91][0][][] */ 4,65,-50,-43,-16,-73,-96,16,-48,19,-81,-85,-127,-73,12,5, 
  /* [92][0][][] */ 65,35,55,20,-127,-83,20,2,-27,29,-27,-37,-26,-89,19,-2, 
  /* [93][0][][] */ -27,-122,-127,67,-36,-42,-3,109,99,77,24,63,-84,73,-35,-32, 
  /* [94][0][][] */ 92,14,124,-28,21,-39,5,44,25,94,6,77,10,20,127,-1, 
  /* [95][0][][] */ -83,-48,-31,-22,127,-17,38,81,-36,-18,-107,-52,28,19,-64,45, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0047945594415068626, 0.0018460658611729741, 0.0055404109880328178, 0.0035024171229451895, 0.0026131840422749519, 0.0012438034173101187, 0.0047016851603984833, 0.0026182259898632765, 0.0011135442182421684, 0.0031553334556519985, 0.00095522555056959391, 0.0025541344657540321, 0.0027555031701922417, 0.0068786018528044224, 0.0023629260249435902, 0.0021882459986954927, 0.0044448762200772762, 0.002967457752674818, 0.0028070833068341017, 0.001386920572258532, 0.0041584926657378674, 0.0018425895832479, 0.003135062986984849, 0.0031381468288600445, 0.0013523221714422107, 0.00249669817276299, 0.0033722431398928165, 0.0041995546780526638, 0.0024126202333718538, 0.0039941230788826942, 0.0028888857923448086, 0.0021459027193486691, 0.0043410826474428177, 0.0016130752628669143, 0.0023717628791928291, 0.0026253454852849245, 0.0027470099739730358, 0.004298691637814045, 0.0020421496592462063, 0.00304001709446311, 0.00093029224080964923, 0.0030984312761574984, 0.0027353581972420216, 0.0020852289162576199, 0.0024126730859279633, 0.0016337023116648197, 0.0017127832397818565, 0.0016374081606045365, 0.0045815696939826012, 0.0040906523354351521, 0.0038214330561459064, 0.0024844636209309101, 0.0037033178377896547, 0.0021727231796830893, 0.0015330027090385556, 0.0056359139271080494, 0.0027411992195993662, 0.0013607228174805641, 0.0028083289507776499, 0.0032200997229665518, 0.0032779958564788103, 0.0015082088066264987, 0.0025972540024667978, 0.0037711700424551964, 0.0010262251598760486, 0.0010459108743816614, 0.0037915401626378298, 0.0038106306456029415, 0.002486290642991662, 0.0020253523252904415, 0.0038831722922623158, 0.0021738125942647457, 0.0029550283215939999, 0.0025689864996820688, 0.0040641683153808117, 0.0037339357659220695, 0.0035506286658346653, 0.0016288699116557837, 0.0029325042851269245, 0.0025909438263624907, 0.0032744486816227436, 0.0030858854297548532, 0.0021539169829338789, 0.0013660251861438155, 0.0023079377133399248, 0.0012648788979277015, 0.0019508182303979993, 0.0037657753564417362, 0.0042243245989084244, 0.0041596554219722748, 0.0024869136977940798, 0.00191645254381001, 0.0028914366848766804, 0.002216933760792017, 0.0019768932834267616, 0.0021575784776359797, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1325, 8648, 450, 2403, 5294, 15085, 85, 2537, 16187, -1220, 19056, 4041, 2271, 538, 4447, 464, 2737, 4681, -229, 13505, 1298, 8912, -1891, 1719, -11937, 1728, 3193, 1823, 7535, 1451, 4192, 5584, 1750, 10954, 4775, 4927, 4452, 2103, 4586, 3310, 21176, 1636, 2783, 2048, 3127, 11029, 8863, 9828, 1014, -1098, 2176, 6138, 2433, -3934, 10557, 151, 2425, 13647, 1474, 1598, 2555, 12218, 5078, -319, 20608, 18380, 2139, 3171, 6616, 5133, 2774, 1766, -3954, 5018, 1891, 3327, 366, 10653, 4167, 6579, 2653, 964, 4543, 14219, -630, 12192, 7604, 2328, -637, 2488, 1825, 8973, 3775, 4027, 5618, 5988, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00023008804419077933, 8.8591594249010086e-05, 0.00026588101172819734, 0.00016807889915071428, 0.00012540514580905437, 5.9689380577765405e-05, 0.00022563105449080467, 0.00012564710050355643, 5.3438321629073471e-05, 0.00015142255870159715, 4.584070120472461e-05, 0.00012257137859705836, 0.0001322349562542513, 0.00033009998151101172, 0.00011339540651533753, 0.00010501261567696929, 0.00021330695017240942, 0.00014240652672015131, 0.00013471025158651173, 6.6557491663843393e-05, 0.00019956358300987631, 8.8424771092832088e-05, 0.00015044979227241129, 0.00015059778525028378, 6.4897132688201964e-05, 0.00011981504940195009, 0.00016183193656615913, 0.00020153411605861038, 0.00011578020348679274, 0.00019167557184118778, 0.00013863590720575303, 0.00010298058623448014, 0.0002083259605569765, 7.7410513767972589e-05, 0.00011381948570488021, 0.00012598876492120326, 0.00013182737166061997, 0.0002062916464637965, 9.8001539299730211e-05, 0.0001458885963074863, 4.4644169975072145e-05, 0.00014869186270516366, 0.00013126819976605475, 0.00010006888624047861, 0.00011578273552004248, 7.8400400525424629e-05, 8.219544542953372e-05, 7.8578239481430501e-05, 0.00021986679348628968, 0.00019630795577540994, 0.00018338828522246331, 0.00011922792327823117, 0.00017772000865079463, 0.00010426768858451396, 7.3567884101066738e-05, 0.00027046413742937148, 0.00013154851330909878, 6.5300271671731025e-05, 0.00013477003085426986, 0.00015453065861947834, 0.00015730905579403043, 7.2378039476461709e-05, 0.00012464066094253212, 0.00018097618885803968, 4.924793029204011e-05, 5.0192636990686879e-05, 0.00018195374286733568, 0.00018286988779436797, 0.00011931559856748208, 9.7195443231612444e-05, 0.00018635111337061971, 0.00010431996633997187, 0.00014181004371494055, 0.00012328413140494376, 0.0001950370060512796, 0.00017918934463523328, 0.00017039255180861801, 7.8168493928387761e-05, 0.00014072912745177746, 0.00012433785013854504, 0.00015713882748968899, 0.00014808979176450521, 0.00010336518607800826, 6.5554733737371862e-05, 0.00011075654765591025, 6.0700782341882586e-05, 9.36185970203951e-05, 0.00018071731028612703, 0.00020272281835786998, 0.00019961937505286187, 0.00011934550275327638, 9.1969413915649056e-05, 0.00013875831791665405, 0.00010638932872097939, 9.486992348683998e-05, 0.00010354090045439079, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -68,-9,-21,-29,82,3,17,-24,-5,-6,-10,-31,-36,-5,3,-15,-20,8,2,-23,-5,26,-10,40,-1,-4,-16,3,15,-1,22,-1,-49,4,-9,-18,-8,-83,-41,-28,0,7,23,-18,-25,38,-75,-17,-38,13,3,45,-56,2,18,-22,-2,-15,10,-8,-2,-7,-9,-73,-23,-35,-46,-39,-8,31,-14,-9,16,5,14,-8,-19,8,127,-22,-125,16,-106,-12,-14,-13,17,11,-57,-14,-2,-52,0,28,-1,4, -37,42,28,-60,-43,-11,127,-48,-3,-17,-35,-1,-77,4,-69,82,-17,74,69,-41,7,127,51,127,34,-14,52,85,127,39,127,-32,-115,-15,-89,-30,-15,-91,127,-70,-32,-104,-21,-47,63,-33,-42,-14,34,11,24,127,-81,29,-94,-10,-92,-10,-5,28,-6,-127,-127,-105,-62,-4,-7,-89,-10,20,-87,120,-127,-1,12,-21,-127,-94,4,-75,-79,6,1,-62,115,86,-56,35,-127,-2,31,-14,9,125,-50,-78, -46,10,6,-35,54,-5,52,-23,-19,11,-10,4,-24,0,2,-26,-8,-6,-8,-34,-7,3,8,32,-6,-26,1,-11,11,4,7,15,35,4,-29,66,-1,-117,-26,9,-10,-1,26,-6,-21,-34,-79,-30,-19,-2,1,28,11,-14,-3,-22,40,-21,8,-27,-3,-6,-50,-37,-40,-43,127,-36,1,24,-2,23,6,13,5,19,-35,42,-33,-11,-76,0,-127,-14,14,-22,9,-13,-60,-37,6,50,5,34,-25,19, 
  /* [0][1][][] */ -115,-5,52,-56,31,87,-48,-24,-3,-20,-25,-19,-127,10,19,58,-15,29,123,17,36,-22,127,-24,44,40,76,11,-12,3,-5,-19,-127,-14,60,-18,-17,-127,-50,-127,-15,0,72,-1,-79,127,-93,-86,55,56,16,-39,-94,69,48,-35,31,-34,35,-3,21,-7,76,-124,-38,7,-25,-37,-4,-1,-127,16,62,127,22,-65,-84,-42,-57,-44,-115,-2,-36,-53,49,28,-98,67,-75,127,81,-91,127,-4,-52,-11, 89,127,127,127,-127,-127,113,-60,127,127,-78,-75,-115,127,-26,127,127,-127,127,127,127,-92,103,-108,-127,-127,127,127,-119,127,-28,127,-71,127,127,-95,127,80,14,3,127,-7,-127,-92,127,-33,127,127,127,-127,127,-107,103,127,-127,127,-127,127,-127,127,-98,121,85,-127,127,127,-9,127,-102,-127,1,-127,18,112,127,78,-5,-127,87,-127,51,127,105,127,127,72,-127,127,-78,43,3,-14,-98,-32,-127,-26, -127,-18,39,-80,5,47,-36,14,-35,-8,-4,127,-119,20,27,63,-21,48,87,2,18,-25,67,-26,45,14,43,12,-14,-5,11,-13,-70,-29,72,127,-3,-90,-69,-100,-32,-26,33,-24,-67,-80,-85,-106,42,67,2,-15,127,12,81,-53,102,-33,52,-48,0,-27,-104,-4,-73,-15,-47,-58,-11,10,-121,14,32,-89,8,127,-82,-58,-45,-7,-127,-6,-75,-78,11,29,-81,55,-55,-77,127,127,-52,-31,-44,3, 
  /* [0][2][][] */ -16,-38,-18,-38,20,1,-13,22,-10,1,32,-34,66,0,-3,-28,-3,-15,-47,-27,-9,-12,39,-28,10,-25,-5,4,-9,-8,-28,3,9,0,4,-22,-9,-48,-17,-8,-22,-5,32,26,18,5,-61,6,-22,0,-2,-20,-4,-23,26,-12,26,-22,7,-7,8,17,1,10,-38,-25,107,34,23,28,-43,3,-13,2,14,-31,-11,45,-30,-24,-84,5,-75,-13,-32,-1,30,-15,14,11,-23,-21,-16,-24,-33,-5, -27,-45,24,-98,-45,10,35,127,-52,56,127,-26,-55,4,127,101,-8,-39,75,-56,-23,-46,74,10,19,-1,39,17,-17,5,-102,-48,-96,-29,-103,-1,-75,-110,50,-89,-22,-127,-44,127,35,-30,-58,6,23,-12,2,-10,68,34,-56,-47,-61,-54,44,-50,127,27,80,-7,-85,-53,-25,-42,127,31,-61,33,14,-29,42,-30,-19,-23,-3,25,-93,-24,-84,-61,50,-127,-13,7,-31,-10,38,-3,10,-127,-61,127, -31,13,-5,-6,23,-5,9,25,-19,-1,13,39,49,-5,-4,-29,-4,4,-25,-35,-5,-15,4,-18,3,-4,-14,-2,-7,-4,-47,-1,20,3,0,7,-4,-53,-25,14,-34,3,5,19,18,-11,-80,13,-22,2,0,-14,0,-30,21,-15,70,-18,12,-20,2,24,-11,8,-32,-29,-27,28,27,13,-12,9,-59,-38,6,-1,-37,10,88,-8,-24,10,-62,13,-38,-6,38,-6,15,-2,-17,17,0,-25,1,3, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0042381961829960346, 0.01188739575445652, 0.0080828377977013588, 0.0063394461758434772, 0.0098812179639935493, 0.021908041089773178, 0.0053029498085379601, 0.0096807070076465607, 0.017365202307701111, 0.013270451687276363, 0.012832158245146275, 0.0080016683787107468, 0.004092539194971323, 0.0086025558412075043, 0.01002180390059948, 0.0060246391221880913, 0.011366097256541252, 0.012840023264288902, 0.0054212426766753197, 0.0144151346758008, 0.010159766301512718, 0.011230261065065861, 0.0057618073187768459, 0.0093425223603844643, 0.094658970832824707, 0.0069723790511488914, 0.0097247930243611336, 0.0066496497020125389, 0.014167775399982929, 0.0081457924097776413, 0.0075914319604635239, 0.014534200541675091, 0.0030596994329243898, 0.019334759563207626, 0.0072406679391860962, 0.0088406875729560852, 0.015338428318500519, 0.0036883300635963678, 0.010461786761879921, 0.0049957726150751114, 0.023632341995835304, 0.0081754084676504135, 0.010883563198149204, 0.0082697253674268723, 0.0064015709795057774, 0.011580795980989933, 0.0055299326777458191, 0.011819877661764622, 0.0094471592456102371, 0.019563984125852585, 0.010309901088476181, 0.0095734558999538422, 0.0067050359211862087, 0.013148780912160873, 0.010409105569124222, 0.010505220852792263, 0.0064388741739094257, 0.016616687178611755, 0.018227038905024529, 0.012993624433875084, 0.01198770385235548, 0.013172966428101063, 0.0076800137758255005, 0.0047026230022311211, 0.011062676087021828, 0.01949881948530674, 0.0049505378119647503, 0.0060633108951151371, 0.01033373549580574, 0.014026384800672531, 0.0050112609751522541, 0.012226752005517483, 0.018684573471546173, 0.0075791981071233749, 0.0058141150511801243, 0.0089629776775836945, 0.0031501858029514551, 0.0078543080016970634, 0.0055402191355824471, 0.0072580082342028618, 0.0033740976359695196, 0.012482892721891403, 0.0046564387157559395, 0.016200874000787735, 0.0049170488491654396, 0.013170123100280762, 0.0060155200771987438, 0.010937376879155636, 0.0049421875737607479, 0.0088148275390267372, 0.0053808121010661125, 0.0095607936382293701, 0.011973009444773197, 0.0072770910337567329, 0.0045824823901057243, 0.013105516321957111, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 11635, -2029, -5425, 9001, 1544, 846, -274, -1025, 1834, -3541, 183, -1604, 11445, -2689, -3163, -7846, 165, 916, -11341, 1662, -3192, 1669, -5213, 38, 29, 8045, -11261, -6079, 631, -3174, 933, -373, 17403, -357, -733, -1626, -129, 14740, 1720, 11915, 204, 5562, 602, 3218, 797, 1734, 11850, 1926, -5151, -33, -5098, -455, -1636, -3381, 2637, 3220, 267, 3699, 153, 954, -1144, -242, 1361, 11093, 11881, 1594, 14803, 8805, -1801, -869, 12172, -2408, 440, -152, -5811, -339, 18998, 9186, 9991, 11538, 16046, -2050, 10400, 6761, -1231, -2356, 10733, -7547, 11222, 888, -7418, -699, 217, 2334, 17347, -2282, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 9.1741872893180698e-05, 0.00025731985806487501, 0.00017496469081379473, 0.00013722646690439433, 0.00021389323228504509, 0.00047423117212019861, 0.00011479000386316329, 0.00020955287618562579, 0.00037589488783851266, 0.00028725809534080327, 0.00027777059585787356, 0.00017320766346529126, 8.8588916696608067e-05, 0.00018621474737301469, 0.00021693641610909253, 0.00013041200872976333, 0.00024603557540103793, 0.00027794085326604545, 0.00011735062435036525, 0.00031203639809973538, 0.00021992280380800366, 0.00024309521540999413, 0.00012472263188101351, 0.00020223238971084356, 0.0020490300375968218, 0.00015092721150722355, 0.00021050719078630209, 0.00014394127356354147, 0.00030668196268379688, 0.0001763274340191856, 0.00016432750271633267, 0.00031461374601349235, 6.6231608798261732e-05, 0.00041852879803627729, 0.00015673470625188202, 0.00019136944320052862, 0.00033202243503183126, 7.9839228419587016e-05, 0.00022646048455499113, 0.00010814070992637426, 0.00051155616529285908, 0.0001769685186445713, 0.00023559044348075986, 0.00017901013779919595, 0.00013857125304639339, 0.00025068304967135191, 0.0001197033780044876, 0.00025585832190699875, 0.00020449739531613886, 0.00042349068098701537, 0.00022317269758787006, 0.00020723127818200737, 0.00014514017675537616, 0.00028462434420362115, 0.00022532012371812016, 0.00022740066924598068, 0.00013937872427050024, 0.00035969217424280941, 0.00039455055957660079, 0.00028126576216891408, 0.00025949114933609962, 0.00028514786390587687, 0.00016624497948214412, 0.00010179506352869794, 0.00023946759756654501, 0.00042208010563626885, 0.00010716154065448791, 0.00013124912220519036, 0.00022368862119037658, 0.00030362134566530585, 0.00010847597877727821, 0.00026466569397598505, 0.00040445456397719681, 0.00016406268696300685, 0.00012585491640493274, 0.00019401659665163606, 6.8190318415872753e-05, 0.00017001783999148756, 0.00011992604413535446, 0.00015711007290519774, 7.303721213247627e-05, 0.00027021023561246693, 0.00010079533967655152, 0.00035069131990894675, 0.00010643662244547158, 0.00028508633840829134, 0.00013021461199969053, 0.0002367553097428754, 0.00010698078403947875, 0.00019080967467743903, 0.00011647544306470081, 0.00020695717830676585, 0.00025917307357303798, 0.00015752314357087016, 9.9194447102490813e-05, 0.00028368781204335392, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 22,28,17,17,-17,-75,-14,4,-19,-62,13,-4,57,-63,51,31,-85,-25,36,11,77,23,-69,16,-13,64,127,68,14,76,47,-39,6,1,-1,-20,27,19,-16,-11,116,22,18,-14,-4,-7,8,-42,22,-28,91,-7,-60,-9,43,19,-8,-45,14,16,-7,43,-52,-9,18,4,60,31,6,-20,23,33,6,43,10,38,59,-33,45,27,-11,53,30,38,-50,3,-13,74,20,12,-82,-23,12,18,105,64, 
  /* [1][0][][] */ 16,34,-54,-13,-9,-44,97,-77,-66,-38,-64,-42,-9,-44,-22,-54,-25,-34,-33,-20,-9,-84,105,-39,-1,21,-4,64,-59,4,-31,18,-36,22,12,9,-21,55,-54,88,23,11,-1,-50,53,-56,-8,34,-71,-8,41,-97,-43,39,55,52,30,20,-70,22,-48,-4,-17,-24,27,22,95,12,-47,-127,4,10,33,63,-29,29,-56,-23,95,-31,43,-18,54,-60,-34,-61,-19,4,-12,-45,29,-11,70,-56,-28,47, 
  /* [2][0][][] */ 15,-15,23,-11,63,41,-50,29,-48,39,11,-18,34,-6,21,27,28,-18,-127,-1,-11,-39,-23,26,-9,-10,-40,19,-32,-18,-21,67,-16,-31,-11,11,-41,17,-22,-21,67,16,9,42,8,55,0,-15,-86,19,-24,12,-10,35,18,-60,32,7,59,26,-19,-5,-8,56,40,2,-41,-6,-6,12,-14,-28,11,43,30,66,-49,-8,-26,-29,37,39,45,-13,-5,-47,-14,-41,-18,-32,-10,77,-5,-4,84,-35, 
  /* [3][0][][] */ 40,-37,-14,-114,-8,-31,106,-22,29,127,-75,-12,10,-17,-21,59,53,52,-23,26,-51,26,19,14,-49,72,55,-6,-37,-10,-64,64,3,-10,27,-21,-1,-55,-33,50,14,13,-14,36,57,-47,-4,28,39,-13,25,-41,110,33,34,-7,-3,-24,7,-44,-24,47,78,3,-23,-19,117,-34,-31,-10,-46,35,18,-62,14,-61,21,-48,122,3,-11,-47,-37,-40,-22,-44,68,83,-43,44,-51,12,1,-67,-20,45, 
  /* [4][0][][] */ -21,73,36,13,-20,7,-30,-19,16,-32,3,-9,21,46,-27,21,-10,-46,-14,-66,26,-29,-67,18,-36,-36,-19,21,-46,127,-47,-14,5,-37,0,-24,60,42,-39,-2,22,7,20,-31,-49,0,54,-23,20,-12,-53,-4,-61,18,50,22,4,63,-18,29,-37,-66,-19,7,58,26,-60,-6,3,-13,8,-61,-7,64,57,68,-34,17,-58,43,17,66,29,-55,50,-70,-37,-62,-37,-51,-51,-9,-3,9,37,-21, 
  /* [5][0][][] */ -1,-16,44,-19,-20,-18,-18,8,43,18,-14,0,-21,-24,24,-21,-12,9,-52,-28,-23,19,-23,19,14,-46,72,-17,2,40,9,80,-7,-78,21,10,-47,-30,-36,-5,-47,3,-21,21,-1,21,-75,21,-24,23,58,-15,32,-77,4,15,-25,-58,16,-35,45,30,28,52,-33,17,103,-26,-4,-25,16,17,-4,36,45,18,-4,-14,127,44,-21,-6,-29,33,50,63,4,104,4,-36,-10,16,5,-8,-30,30, 
  /* [6][0][][] */ 33,-65,79,8,-41,120,-66,-101,-17,-72,-84,80,11,11,-28,87,7,47,14,-29,-96,-27,-85,-58,2,-63,-6,64,-117,48,-23,-37,51,94,-20,-4,-13,-37,23,-27,-54,40,48,-31,16,47,-101,-13,43,12,-81,-127,84,12,-39,-20,27,-28,35,-26,-9,-40,44,14,62,-75,-74,-65,-96,26,-19,-81,-33,-100,28,-97,94,3,-75,48,-36,87,24,-97,72,-47,-20,6,-81,81,-85,112,35,-50,64,-101, 
  /* [7][0][][] */ -4,-3,-57,55,-24,-6,40,-3,-97,0,76,60,5,-51,-9,-29,-15,-1,4,8,-59,-16,-34,-40,65,45,0,69,1,43,29,27,-48,-127,33,104,2,27,-46,-7,2,-10,-2,-83,41,52,79,91,-26,65,-57,13,34,-39,53,-54,-17,42,-73,-16,41,15,19,-36,78,-45,119,-4,-55,-27,76,6,-10,-31,-82,-29,37,-44,103,-29,-11,-8,-67,-27,48,22,-73,54,-19,21,12,45,69,-15,84,1, 
  /* [8][0][][] */ -15,-60,4,11,-14,-4,20,-14,-14,-11,47,39,11,24,-42,-9,71,-3,11,-4,-12,-71,-38,-23,-20,-31,66,7,-17,43,10,-28,-19,0,6,2,-45,-20,18,-23,-8,38,27,-42,13,-17,25,-11,39,-7,51,9,-7,7,-43,0,-12,106,-60,3,-15,-72,-67,-10,-88,-35,-18,15,-2,12,41,-23,-29,-127,38,-106,8,18,-59,16,-28,-12,8,55,58,-64,-42,49,-29,84,9,-24,-44,-3,1,-65, 
  /* [9][0][][] */ -21,-34,-30,26,-4,24,9,36,-40,7,57,60,-31,48,24,-48,-10,29,-20,-35,5,40,-7,5,-30,25,4,21,29,-12,21,2,-21,-12,9,54,-25,-5,26,2,-8,-24,22,0,3,44,4,29,-38,3,-7,33,127,16,-16,-7,8,-14,30,20,-32,-1,79,5,13,19,56,2,28,-6,-20,18,4,-126,-38,-120,-36,-9,34,-4,3,24,6,-39,40,10,-53,-8,2,105,32,27,47,29,-5,28, 
  /* [10][0][][] */ 17,38,8,0,-14,16,-35,-24,58,5,-33,18,14,7,-4,-53,-28,-2,16,-5,25,-15,-19,-33,13,-16,-92,42,-17,47,-2,12,15,22,-17,3,19,4,6,3,34,-11,53,-45,-28,-1,16,25,22,-2,5,-20,-25,-12,-5,29,-9,5,-19,-4,-15,-39,-10,6,-7,-17,-85,-27,-49,-13,38,-14,-17,31,28,13,44,-14,-88,8,-10,26,3,-7,2,8,-64,-127,-19,22,8,16,51,-28,19,24, 
  /* [11][0][][] */ 12,-31,-6,12,-57,26,19,4,65,-20,-19,-38,17,12,14,-14,-25,44,18,-66,10,25,12,-25,34,17,52,5,27,-59,-27,17,13,97,-99,12,21,-6,61,9,-52,49,-20,6,-39,4,-8,-2,52,-26,-28,-11,-21,13,-70,84,-23,2,-12,-23,16,-4,-8,-69,-12,-42,-127,-70,-1,-35,-88,22,44,17,-14,-8,29,58,-116,-40,-9,-9,-8,1,-28,-9,53,70,17,-41,4,2,-28,24,83,23, 
  /* [12][0][][] */ 27,30,-30,-29,13,-27,1,43,63,-31,19,6,3,-14,-4,11,8,-34,-26,20,8,56,3,57,-44,-40,-127,-14,79,-23,26,-1,-15,-70,66,-7,28,-12,-8,10,3,-53,16,41,46,0,29,-17,-80,5,-49,94,81,-26,35,-75,8,23,-30,-38,20,60,92,11,-9,-11,32,27,113,30,27,35,9,-11,-6,3,-33,-63,47,-65,23,-44,31,-34,12,2,0,-102,-14,43,-38,30,6,78,11,48, 
  /* [13][0][][] */ -5,10,-66,27,24,21,-10,10,32,74,-35,52,-51,-28,75,-56,16,63,57,24,-29,-48,-11,19,30,52,-20,24,9,37,49,-17,-16,74,-10,44,13,-36,-52,-54,7,-5,26,20,47,50,-27,41,-51,48,5,-2,-8,-49,65,31,10,-54,-4,-16,22,25,19,-23,17,90,127,40,20,5,-54,-14,38,52,-79,58,17,-75,126,-43,-10,-42,20,6,37,52,-41,-25,-13,-16,4,65,36,16,69,60, 
  /* [14][0][][] */ 0,56,29,28,-61,-48,13,51,-74,-13,70,15,-78,-6,77,-23,-44,41,-60,31,-29,23,-108,19,-70,3,-50,-120,14,-2,25,81,-57,26,-3,-20,-31,-75,-12,-46,38,-30,51,-15,-15,52,-75,18,-23,-35,89,24,-10,21,-31,29,-62,30,10,34,45,72,1,53,25,-44,-6,-70,35,62,86,33,-60,38,15,21,33,-16,35,26,-61,122,-3,-127,93,-13,-8,13,-105,-12,-14,4,-40,21,44,39, 
  /* [15][0][][] */ 67,-35,17,32,37,11,-13,-17,15,32,-69,-23,66,66,-7,-12,-11,-1,-76,47,-3,-28,23,29,79,-41,81,27,42,-28,-42,63,66,51,0,-84,73,73,76,63,87,51,-21,-9,-44,-127,34,-34,-28,-32,-14,-4,-14,-48,-36,59,-6,6,-24,23,-1,-61,-39,26,34,42,-78,36,-15,-39,-10,-8,5,-122,-49,-118,-24,19,-123,24,88,-41,61,22,-66,-7,-4,-23,40,94,10,-80,-29,-32,31,-48, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0042553627863526344, 0.0026104957796633244, 0.002917381701990962, 0.002616100013256073, 0.0037402568850666285, 0.0053637768141925335, 0.0024409738834947348, 0.0024790239986032248, 0.0049170269630849361, 0.0042524752207100391, 0.0047820229083299637, 0.0035139955580234528, 0.00318727339617908, 0.0033354891929775476, 0.0033379618544131517, 0.0030233047436922789, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -27698, -1724, 1085, -17719, 10057, -16349, 21509, -14098, 14083, -8730, 13577, 12930, -8114, -32160, -2068, 8416, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.0001001261844066903, 6.1423430452123284e-05, 6.8644279963336885e-05, 6.1555292631965131e-05, 8.8006047008093446e-05, 0.00012620651978068054, 5.7434681366430596e-05, 5.8329977036919445e-05, 0.00011569475464057177, 0.00010005824151448905, 0.00011251818796154112, 8.2682250649668276e-05, 7.4994670285377651e-05, 7.8482102253474295e-05, 7.8540280810557306e-05, 7.1136586484499276e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -23,49,-9,-35,-17,-68,-66,-28,59,-35,29,-49,73,-110,11,-127, 
  /* [1][0][][] */ -79,81,-98,-127,-75,26,9,67,-42,13,78,-44,70,109,12,51, 
  /* [2][0][][] */ -56,-6,-63,10,-32,-63,31,-49,-91,116,99,9,46,51,-48,127, 
  /* [3][0][][] */ -49,-78,7,-47,-90,3,-53,-127,-5,25,37,-67,-73,-50,-125,-47, 
  /* [4][0][][] */ 64,-1,-32,50,-60,-13,-127,38,26,72,13,35,14,8,-48,-70, 
  /* [5][0][][] */ -109,66,-107,-26,72,-56,-31,-79,127,-35,12,-52,28,-119,-109,-110, 
  /* [6][0][][] */ -2,-46,-23,34,-95,73,44,-51,-7,-37,127,-13,-23,-18,-110,28, 
  /* [7][0][][] */ -20,108,127,-79,43,85,15,-68,35,53,-86,-22,47,0,35,85, 
  /* [8][0][][] */ -48,4,34,-5,59,8,97,127,-73,-20,-61,-81,40,92,-74,-68, 
  /* [9][0][][] */ 51,62,82,5,-102,-30,-111,-104,73,-2,127,46,-55,-95,33,-28, 
  /* [10][0][][] */ 0,-127,23,-66,-116,75,36,10,-20,-62,-11,34,-7,47,-112,34, 
  /* [11][0][][] */ 125,-54,-7,102,-111,-31,56,-12,125,127,-56,53,26,-82,-13,110, 
  /* [12][0][][] */ -70,-73,127,-6,72,-10,25,68,74,-24,89,59,-22,33,-91,32, 
  /* [13][0][][] */ -15,-33,15,26,13,17,127,35,-103,12,26,18,-16,116,82,-76, 
  /* [14][0][][] */ 113,-69,122,-11,105,62,127,90,93,105,108,54,89,-21,22,-73, 
  /* [15][0][][] */ -19,114,28,-45,50,121,-79,88,-56,-10,-44,-18,-49,127,-28,-47, 
  /* [16][0][][] */ -43,75,101,-45,26,82,-3,-16,-11,13,-8,38,81,15,77,127, 
  /* [17][0][][] */ -19,95,73,-127,30,-36,-3,-63,-64,62,-13,67,-79,-26,106,-45, 
  /* [18][0][][] */ -81,-10,-88,-90,95,83,-49,-72,48,74,127,79,-19,118,-33,-8, 
  /* [19][0][][] */ 60,127,72,75,41,-30,-4,-9,-30,101,43,105,50,73,-63,29, 
  /* [20][0][][] */ 86,-5,12,62,-63,0,-29,47,-28,-45,-127,-44,89,-36,19,-9, 
  /* [21][0][][] */ -72,-71,-28,108,-15,4,-127,74,14,-8,21,22,-31,29,-63,8, 
  /* [22][0][][] */ -5,3,-93,-40,127,4,-34,71,92,75,54,55,-18,30,-12,47, 
  /* [23][0][][] */ -51,26,-30,15,-4,57,91,68,-13,127,-25,-20,4,24,-45,-29, 
  /* [24][0][][] */ 30,-78,27,5,127,45,65,-26,50,30,39,29,-67,29,4,-27, 
  /* [25][0][][] */ 127,-51,76,9,4,-20,-44,96,117,-17,-48,-1,109,-60,95,52, 
  /* [26][0][][] */ 43,37,85,102,65,-19,-67,-9,5,61,27,127,20,-52,34,-59, 
  /* [27][0][][] */ -43,28,-69,32,-17,125,-3,-78,34,-80,107,23,36,-44,127,77, 
  /* [28][0][][] */ -41,36,-84,-127,29,-78,9,-57,-99,97,-54,26,-21,34,-13,61, 
  /* [29][0][][] */ 85,80,-78,28,26,61,-44,-24,55,44,12,57,-127,-2,-33,68, 
  /* [30][0][][] */ -5,84,-122,-70,93,-38,5,5,-56,61,-86,-19,23,83,-16,127, 
  /* [31][0][][] */ 15,-109,61,36,47,-61,-46,13,-11,-1,19,-23,-57,36,28,127, 
  /* [32][0][][] */ -56,67,10,37,-127,60,7,76,34,-122,29,-87,32,28,45,44, 
  /* [33][0][][] */ -68,-5,60,95,-11,25,-43,12,-55,-44,11,-20,-11,-8,11,127, 
  /* [34][0][][] */ -4,19,-86,-89,59,-25,-20,67,25,-7,-11,-11,-57,-29,-33,127, 
  /* [35][0][][] */ 65,4,23,-24,-5,6,-70,-21,-21,-127,-44,9,-2,-28,39,-15, 
  /* [36][0][][] */ -19,26,-127,-18,46,123,-18,56,-33,27,67,24,29,27,-83,69, 
  /* [37][0][][] */ 45,43,46,-46,42,-127,38,-23,-95,63,-65,-20,1,25,94,42, 
  /* [38][0][][] */ -34,127,23,-41,20,24,72,-110,10,-9,-91,45,-58,-94,-80,28, 
  /* [39][0][][] */ 95,44,-127,-112,-17,-20,12,-77,17,-4,11,-32,66,1,-117,-73, 
  /* [40][0][][] */ -46,20,-74,-93,-48,-19,24,-127,-4,-4,11,-34,35,80,41,77, 
  /* [41][0][][] */ -37,-90,-5,127,7,-13,-84,-27,-16,-57,79,-59,-84,-5,10,21, 
  /* [42][0][][] */ -19,58,-27,-127,20,24,-9,-22,55,-8,-31,29,60,-30,-16,6, 
  /* [43][0][][] */ -7,63,-9,18,124,31,18,24,15,28,13,-104,-127,-42,-1,-15, 
  /* [44][0][][] */ 82,-1,34,51,-27,-3,-3,27,15,-28,25,14,127,17,-33,-29, 
  /* [45][0][][] */ 9,-74,-66,34,-40,-79,2,49,20,-25,17,28,-81,127,33,-28, 
  /* [46][0][][] */ -30,-99,40,109,16,7,-117,75,33,-55,70,-43,54,95,69,127, 
  /* [47][0][][] */ -40,-64,24,86,7,6,73,20,8,-72,-127,-46,48,-26,-61,25, 
  /* [48][0][][] */ -75,101,-39,-24,8,66,-23,-127,34,-24,50,-27,39,-96,-48,-16, 
  /* [49][0][][] */ -57,7,48,-31,4,8,115,127,-31,-29,-12,25,-39,37,-50,30, 
  /* [50][0][][] */ 45,19,-81,28,26,-127,-40,-4,-78,44,-38,-7,8,-80,-114,-36, 
  /* [51][0][][] */ -46,70,-24,123,-39,57,-80,-107,-69,-97,-5,-53,-5,42,-5,127, 
  /* [52][0][][] */ -127,5,14,-2,24,45,46,12,6,-74,-36,-39,-92,-39,-103,-9, 
  /* [53][0][][] */ -47,-73,-36,-127,-30,-14,10,71,41,-48,-58,22,-19,22,61,124, 
  /* [54][0][][] */ 18,-59,-1,-9,-55,68,49,-14,-18,-95,37,11,-21,-18,-127,31, 
  /* [55][0][][] */ -8,-25,-33,34,65,-20,55,79,-59,-52,-127,-32,64,-23,-16,32, 
  /* [56][0][][] */ 29,-17,-78,-34,-127,4,-107,-1,-1,-8,-4,39,69,-32,31,17, 
  /* [57][0][][] */ -51,11,23,-32,127,47,55,30,-19,55,0,-12,-61,68,-101,-16, 
  /* [58][0][][] */ 31,8,-2,-16,44,-6,-52,-57,56,-127,-72,2,-71,-48,-30,48, 
  /* [59][0][][] */ -74,-18,-26,17,4,46,-103,-43,89,127,-61,26,-28,7,-14,1, 
  /* [60][0][][] */ 15,-66,-6,19,-127,-53,42,13,5,42,-20,51,7,-36,35,55, 
  /* [61][0][][] */ 8,29,-90,-6,-53,-17,-127,-66,-7,13,50,104,77,-53,104,61, 
  /* [62][0][][] */ 38,-18,37,-13,1,48,37,127,-71,127,38,90,23,48,58,104, 
  /* [63][0][][] */ 24,-121,-6,-15,-74,12,47,-31,-13,-20,-9,-12,-27,127,117,40, 
  /* [64][0][][] */ 8,6,-127,-17,10,52,21,-29,-5,-81,44,21,56,-20,-50,86, 
  /* [65][0][][] */ -20,-8,53,76,85,-18,73,99,-30,-7,-127,-76,34,117,-80,-22, 
  /* [66][0][][] */ -41,-94,-14,-107,-60,-127,28,-31,16,-28,18,73,-42,-48,-63,79, 
  /* [67][0][][] */ -39,-89,-86,-15,-66,127,-16,-118,-84,-21,-61,-115,32,-11,-82,30, 
  /* [68][0][][] */ 126,61,14,-29,-76,18,-57,-46,-110,-127,-26,-4,31,-29,63,-81, 
  /* [69][0][][] */ 44,10,35,-12,-7,-43,-37,34,-7,127,-23,0,10,39,63,-15, 
  /* [70][0][][] */ 27,-16,-14,69,-127,33,-6,-114,84,106,35,76,55,-60,11,25, 
  /* [71][0][][] */ 127,-51,57,91,-80,-24,43,-33,95,-7,-48,29,68,-51,40,15, 
  /* [72][0][][] */ -3,-28,44,105,60,10,-127,83,91,-3,46,8,-48,-69,-70,86, 
  /* [73][0][][] */ 91,13,67,-127,93,-69,-70,51,-12,121,-67,15,26,-81,32,-54, 
  /* [74][0][][] */ 91,21,21,36,-127,-30,36,-5,-69,-50,21,-38,19,-70,7,11, 
  /* [75][0][][] */ 71,127,-111,14,55,49,-27,-25,-18,-32,57,82,-119,49,46,85, 
  /* [76][0][][] */ -81,-45,0,-59,-56,-18,90,-3,-56,36,101,52,-59,-127,-30,95, 
  /* [77][0][][] */ -29,127,-39,11,-49,-63,55,79,37,-52,-28,53,-26,63,-15,51, 
  /* [78][0][][] */ 126,43,-63,36,-57,36,-127,-14,-12,-6,-77,5,31,-81,27,53, 
  /* [79][0][][] */ -58,-22,127,37,-9,-76,-49,-43,-40,18,1,12,-57,108,-33,49, 
  /* [80][0][][] */ 30,81,35,-127,-25,17,84,-40,20,31,-33,24,81,-61,11,10, 
  /* [81][0][][] */ 37,-69,18,-105,97,40,-5,127,111,27,-20,-53,-14,22,-87,-71, 
  /* [82][0][][] */ 82,52,63,4,127,-89,20,52,13,99,-27,27,-11,-36,28,-106, 
  /* [83][0][][] */ -41,87,11,22,75,51,116,127,9,59,-51,-79,-94,118,-72,-109, 
  /* [84][0][][] */ 19,-111,-3,125,9,-87,-104,31,-101,75,-84,-5,-127,82,4,-76, 
  /* [85][0][][] */ -115,69,-60,-35,-33,-56,-44,-39,-45,21,3,-91,-127,-87,-70,38, 
  /* [86][0][][] */ -29,70,92,127,22,-37,61,27,3,21,-39,-72,39,90,-127,-65, 
  /* [87][0][][] */ -25,46,127,-37,-103,-37,25,18,45,-25,16,45,-55,14,-14,-1, 
  /* [88][0][][] */ -23,-79,-96,23,28,39,6,11,-21,-81,-108,-98,127,-32,12,39, 
  /* [89][0][][] */ 40,30,18,-109,11,-54,-50,44,127,-11,21,-112,10,-31,65,-79, 
  /* [90][0][][] */ -7,75,12,4,-42,32,50,109,7,-66,-7,127,49,15,-47,93, 
  /* [91][0][][] */ -74,8,-55,74,78,51,-51,-109,-35,48,14,11,-122,-127,-76,-25, 
  /* [92][0][][] */ -29,63,6,-37,-127,-11,-91,47,-57,54,95,94,-25,-23,73,16, 
  /* [93][0][][] */ 90,25,97,48,-127,-69,25,18,-15,-65,-16,-67,38,-49,-15,6, 
  /* [94][0][][] */ -35,-127,28,-113,10,29,-13,6,90,-22,2,48,15,55,-51,49, 
  /* [95][0][][] */ -52,-50,-13,-58,91,92,-29,53,92,65,-76,42,-37,127,-72,49, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0016884625656530261, 0.0017763704527169466, 0.002197005320340395, 0.0023429952561855316, 0.0020425403490662575, 0.0012671182630583644, 0.0014533855719491839, 0.0024041715078055859, 0.0020094402134418488, 0.0011403232347220182, 0.0030900740530341864, 0.0014579633716493845, 0.0020472358446568251, 0.0020640715956687927, 0.0020999801345169544, 0.0017559595871716738, 0.0022247019223868847, 0.0014106986345723271, 0.0017917922232300043, 0.0024745839182287455, 0.0021065811160951853, 0.0010563930263742805, 0.001266325474716723, 0.0025616367347538471, 0.0027525818441063166, 0.0020095317158848047, 0.0013214354403316975, 0.0017054630443453789, 0.0022760848514735699, 0.0025695136282593012, 0.0014153416268527508, 0.0030597171280533075, 0.0011063329875469208, 0.0025764107704162598, 0.0027803045231848955, 0.0022629708983004093, 0.001942586968652904, 0.0016845916397869587, 0.0023000796791166067, 0.0023725789505988359, 0.0023142760619521141, 0.0024177697487175465, 0.0034238002263009548, 0.0030648487154394388, 0.0043200752697885036, 0.0026872535236179829, 0.0014204989420250058, 0.0020230042282491922, 0.0025754866655915976, 0.0027724402025341988, 0.0015677722403779626, 0.001727957627736032, 0.0027116509154438972, 0.0033103595487773418, 0.0030431866180151701, 0.002314374316483736, 0.0027320545632392168, 0.0020720597822219133, 0.0015614900039508939, 0.0025662207044661045, 0.0025881284382194281, 0.0016536774346604943, 0.0020132041536271572, 0.0022796036209911108, 0.0024736961349844933, 0.0012842663563787937, 0.0017519451212137938, 0.0020184239838272333, 0.0016762031009420753, 0.0029519223608076572, 0.0014063114067539573, 0.0021146915387362242, 0.0018924217438325286, 0.0013554154429584742, 0.0021378959063440561, 0.0017379903001710773, 0.002452207962051034, 0.002542159054428339, 0.0024907835759222507, 0.0025340891443192959, 0.0022659406531602144, 0.0018038859125226736, 0.0012402785941958427, 0.0019342561718076468, 0.0018268026178702712, 0.0020836822222918272, 0.0025073899887502193, 0.0030452434439212084, 0.00079897965770214796, 0.0024031717330217361, 0.0028610392473638058, 0.0024484575260430574, 0.00098365102894604206, 0.0022343285381793976, 0.0030404690187424421, 0.0021983806509524584, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 5631, 1987, 987, -1236, 4344, 7574, 7230, 1435, -281, 8620, 666, -4064, 3170, 2997, 625, -716, 3513, 6760, -74, 140, 3698, 10291, 8279, -1516, -2521, -606, 8456, 173, 1518, 910, 7093, -1203, 9081, 2533, 2949, -3385, 1156, -4756, 132, 1567, 2586, 1315, 1359, -517, 702, 1695, 5296, 3606, 2661, 2169, 5619, 3089, -1694, 1276, 1040, 2086, 1634, 2296, 6526, 956, -1208, 5325, 3384, 3269, 2824, 7329, -4025, 2696, 3962, -824, 6344, 1148, 2870, 3760, 3462, 2123, -503, 1676, 1745, 2635, 2239, 2954, 7796, 611, 2428, 3857, 817, -901, 15038, -578, 744, -1301, 10715, 2317, 61, -684, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00013423281779978424, 0.00014122150605544448, 0.00017466198187321424, 0.00018626818200573325, 0.00016238201351370662, 0.00010073593875858933, 0.00011554419324966148, 0.00019113169400952756, 0.00015975054702721536, 9.0655725216493011e-05, 0.00024566097999922931, 0.00011590812937356532, 0.00016275529924314469, 0.00016409374075010419, 0.00016694847727194428, 0.00013959883654024452, 0.00017686386127024889, 0.00011215057747904211, 0.00014244753401726484, 0.00019672948110383004, 0.00016747324843890965, 8.3983271906618029e-05, 0.00010067290713777766, 0.00020365018281154335, 0.00021883033332414925, 0.00015975782298482955, 0.00010505415411898866, 0.00013558435603044927, 0.00018094880215357989, 0.00020427640993148088, 0.00011251969408476725, 0.00024324758851435035, 8.7953500042203814e-05, 0.00020482472609728575, 0.00022103427909314632, 0.00017990624473895878, 0.00015443572192452848, 0.00013392507389653474, 0.00018285639816895127, 0.00018862009164877236, 0.00018398501561023295, 0.00019221275579184294, 0.0002721922064665705, 0.00024365555145777762, 0.00034344609593972564, 0.00021363672567531466, 0.0001129297015722841, 0.00016082888760138303, 0.00020475125347729772, 0.00022040907060727477, 0.00012463793973438442, 0.00013737268454860896, 0.00021557632135227323, 0.0002631736861076206, 0.00024193341960199177, 0.00018399281543679535, 0.00021719840879086405, 0.00016472881543450058, 0.00012413850345183164, 0.00020401462097652256, 0.00020575628150254488, 0.00013146740093361586, 0.00016004977806005627, 0.00018122854817193002, 0.00019665890431497246, 0.00010209921310888603, 0.00013927968393545598, 0.00016046475502662361, 0.00013325818872544914, 0.0002346779074287042, 0.00011180179717484862, 0.00016811802925076336, 0.00015044758038129658, 0.00010775556438602507, 0.00016996277554426342, 0.00013817027502227575, 0.00019495059677865356, 0.00020210171351209283, 0.00019801735470537096, 0.00020146014867350459, 0.00018014234956353903, 0.00014340897905640304, 9.8602184152696282e-05, 0.00015377342060673982, 0.00014523086429107934, 0.00016565278929192573, 0.00019933757721446455, 0.00024209693947341293, 6.3518906245008111e-05, 0.00019105221144855022, 0.00022745269234292209, 0.00019465244258753955, 7.8200282587204129e-05, 0.00017762917559593916, 0.00024171736731659621, 0.00017477132496424019, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 22,127,-14,41,-27,7,33,41,66,-87,-70,30,-2,-10,60,-56,-87,20,42,54,34,55,61,106,19,-20,-42,4,-10,15,22,-34,-57,7,-26,76,-22,30,-9,6,22,-53,-10,15,-109,-39,12,-29,-21,-76,-29,-6,1,54,-24,-10,-64,-46,-47,-127,-93,6,-104,14,-46,42,79,-13,-24,23,33,-14,-36,24,49,-3,23,-50,-60,17,-14,-89,56,-24,-121,-43,5,32,-127,6,-80,36,51,0,74,-1, -43,-49,10,93,-5,91,-33,-8,74,20,-127,57,-25,-49,-117,127,-127,65,73,119,127,12,112,127,33,6,23,57,-1,127,-4,-127,72,64,12,31,63,75,-33,-127,127,-17,78,127,-70,-79,127,-66,12,-127,-105,-16,6,127,-37,-127,20,26,-119,-56,-66,-127,-40,116,-53,90,127,-35,2,127,127,-4,-68,36,-39,-108,42,-59,-2,127,-6,-61,127,-61,-100,-47,83,75,72,113,-69,-6,127,-20,127,44, 13,-122,10,15,-5,-10,-11,50,30,63,-85,31,-19,46,9,-115,-27,-1,37,58,42,44,74,108,24,-42,31,43,-7,28,-6,-25,-65,-80,-29,112,-16,24,18,13,-7,27,-17,73,-5,-25,9,0,40,-52,6,4,-8,-4,6,5,49,-54,-23,-75,-127,40,-85,0,31,13,-34,-2,-21,-7,18,3,-16,-35,0,8,21,-14,-54,-16,10,-79,31,-20,-51,-29,5,-6,-88,3,-19,45,17,40,16,-26, 
  /* [0][1][][] */ 89,2,48,127,5,-53,127,36,-20,-127,-110,127,11,-127,-40,28,-65,-55,109,22,-108,-7,-127,-41,-13,41,-125,127,-99,63,127,96,23,74,7,127,-127,76,-24,-45,56,-127,11,67,-127,-63,3,-127,-99,-88,-93,11,127,-46,71,-19,-127,5,-75,14,-63,-78,-44,68,-113,-22,110,-95,-59,18,-46,-127,-127,65,127,-81,114,67,-70,-56,127,-127,-29,127,-56,3,4,96,-11,24,-69,33,-30,-62,75,-27, -127,-11,-50,114,-76,-127,-126,-127,80,16,-54,48,-81,-127,-24,99,-120,-127,127,127,34,-127,-109,74,-127,127,14,94,-103,-19,-111,91,-127,84,127,-70,16,127,127,-100,-50,27,9,42,-11,-127,-74,-106,9,-117,-127,127,18,79,42,-75,29,19,95,-4,-33,-57,-127,127,-23,-127,124,127,15,57,-115,-82,-23,68,-123,-127,127,127,64,-62,-80,-9,-87,93,-127,-70,127,127,118,127,-127,-127,-121,-44,81,127, 45,-6,72,85,-8,-34,12,33,-47,119,-87,80,-5,-17,-127,53,8,-36,46,5,-101,0,-63,-62,-1,11,127,-3,127,83,19,-113,-19,-127,-10,116,-124,24,-23,-38,-18,114,20,110,-28,-24,-10,-82,127,-74,-92,2,37,-81,-127,34,94,4,-127,51,30,-51,3,54,127,-47,-16,-19,-70,-16,-45,-53,-99,-127,-10,-32,-16,-28,-127,-54,-62,-126,-19,122,-89,23,19,3,-22,-4,-28,45,-32,127,13,-18, 
  /* [0][2][][] */ 30,-123,49,1,19,14,27,36,-33,-47,23,-27,12,-1,16,40,-31,3,-14,41,0,33,0,-27,22,52,-8,22,-25,27,3,41,-29,-17,-24,46,44,-13,5,-8,6,13,-19,-59,-71,-29,-12,-1,-10,31,-1,31,-5,-2,-40,-14,-10,-19,-17,41,-52,18,44,-28,-23,44,-43,-38,20,-1,15,73,-9,15,5,-2,-30,-23,-29,8,8,-9,-16,-29,-67,40,-42,0,-81,34,-9,17,-15,-1,4,-14, -48,8,127,7,127,60,-35,13,-127,11,-67,-36,127,-25,-20,26,6,48,10,-59,19,14,34,21,71,-67,8,47,-1,80,-11,10,-95,17,12,-23,52,29,12,-77,-18,-9,-127,11,-15,-10,-41,-60,1,-57,-69,83,95,-66,-31,-88,-11,127,-31,17,53,-92,83,55,-41,25,-42,11,127,-2,14,87,-50,27,-17,-65,5,-84,-18,-46,-23,-71,-20,-82,-66,127,37,12,75,67,28,22,-34,-11,-9,-11, 11,108,18,-18,-4,-9,-12,49,7,72,-10,12,8,12,-1,47,-37,-4,9,50,-4,29,-7,-11,14,39,22,45,14,41,-19,-77,-50,-29,-15,16,35,-4,6,-7,-3,-17,14,37,-24,-35,-31,8,28,53,-8,16,-6,-11,-3,11,21,4,-9,44,-41,14,23,-37,22,5,-75,11,9,-2,-3,65,39,-20,-18,-1,-17,-21,-23,-5,-2,-79,-17,-15,-44,34,-13,-28,-84,52,5,32,-17,16,-22,-28, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.010132599622011185, 0.0078235501423478127, 0.0064290482550859451, 0.0074438313022255898, 0.011362193152308464, 0.012092696502804756, 0.012671288102865219, 0.0086620142683386803, 0.010606460273265839, 0.006088524591177702, 0.0048950393684208393, 0.014232145622372627, 0.011142740026116371, 0.0057118786498904228, 0.0073370989412069321, 0.0070916512049734592, 0.0049753100611269474, 0.010867169126868248, 0.0050980676896870136, 0.0043325922451913357, 0.0079475576058030128, 0.013835323974490166, 0.0099885482341051102, 0.0092250322923064232, 0.028375228866934776, 0.009081508032977581, 0.011173461563885212, 0.0046342499554157257, 0.008083009161055088, 0.0046147708781063557, 0.013167292810976505, 0.011328269727528095, 0.0065198484808206558, 0.0076984777115285397, 0.01226505171507597, 0.016063138842582703, 0.0085981981828808784, 0.018227711319923401, 0.01376289501786232, 0.0063837138004601002, 0.00889577716588974, 0.0090907970443367958, 0.01073241513222456, 0.0054657752625644207, 0.0044647236354649067, 0.0047886804677546024, 0.010458718985319138, 0.0044107548892498016, 0.0078466711565852165, 0.0046912967227399349, 0.0046915202401578426, 0.0062501127831637859, 0.0097884228453040123, 0.007290335837751627, 0.0095965275540947914, 0.0062949326820671558, 0.0086618280038237572, 0.010678060352802277, 0.0060520791448652744, 0.0064229271374642849, 0.007912089116871357, 0.0069540152326226234, 0.006471624132245779, 0.0050365193746984005, 0.007059931755065918, 0.012386463582515717, 0.010151353664696217, 0.0085789849981665611, 0.010657414793968201, 0.011087239719927311, 0.01075875386595726, 0.006602652370929718, 0.0058806492015719414, 0.0090717114508152008, 0.011090508662164211, 0.0050762989558279514, 0.0061150435358285904, 0.0092095574364066124, 0.0080318143591284752, 0.009396611712872982, 0.011068064719438553, 0.0041536330245435238, 0.010941619053483009, 0.0077741700224578381, 0.0033355753403156996, 0.0094492500647902489, 0.0059246327728033066, 0.0079751377925276756, 0.0099094482138752937, 0.0080658160150051117, 0.00468034902587533, 0.013508675619959831, 0.0098363049328327179, 0.012423495762050152, 0.0061908601783216, 0.013084900565445423, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 696, 315, -3049, -6068, -1184, 3586, 276, -160, -1140, -1857, 11241, -2654, -1020, 10582, 6759, -4099, 16442, 3618, -9120, -2148, -2009, 296, 1020, -3028, 333, -3652, -2378, -6793, 677, -8567, -924, -346, 13419, 746, -2025, -225, 1478, -1360, -609, 6793, -287, 218, 2210, -5918, 13920, 14814, 354, 14655, -3256, 12234, 13681, -4250, -883, -817, 1206, 11842, -1332, -1138, 17224, 5627, 8056, 12202, 8605, -8441, 3177, 1265, -3326, 3384, -1135, -1640, 2200, 3085, 11015, -1129, 35, 12337, -1886, 995, 8740, 1247, -174, 18344, -1579, 1080, 20386, -858, -5180, -4420, 2964, -6654, 13979, 131, 2747, -1585, -4876, -3017, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00021177070448175073, 0.00016351172234863043, 0.00013436670997180045, 0.00015557561710011214, 0.0002374691393924877, 0.00025273661594837904, 0.00026482914108783007, 0.00018103556067217141, 0.00022167435963638127, 0.00012724979023914784, 0.00010230602492811158, 0.00029745095525868237, 0.00023288257943931967, 0.00011937790986848995, 0.0001533449103590101, 0.00014821506920270622, 0.00010398367157904431, 0.00022712316422257572, 0.00010654929792508483, 9.0550907771103084e-05, 0.00016610346210654825, 0.00028915741131640971, 0.00020876004418823868, 0.00019280260312370956, 0.00059304054593667388, 0.00018980295863002539, 0.0002335246535949409, 9.6855539595708251e-05, 0.00016893439169507474, 9.6448427939321846e-05, 0.00027519560535438359, 0.00023676014097873122, 0.00013626442523673177, 0.00016089770360849798, 0.00025633882614783943, 0.00033571862149983644, 0.00017970181943383068, 0.00038095805211924016, 0.00028764366288669407, 0.00013341922021936625, 0.00018592119158711284, 0.00018999709573108703, 0.00022430681565310806, 0.00011423436808399856, 9.3312446551863104e-05, 0.00010008312528952956, 0.00021858658874407411, 9.2184505774639547e-05, 0.00016399494779761881, 9.8047814390156418e-05, 9.8052485554944724e-05, 0.00013062696962151676, 0.00020457743084989488, 0.00015236757462844253, 0.00020056683570146561, 0.0001315637055085972, 0.00018103167531080544, 0.00022317080583889037, 0.00012648808478843421, 0.00013423878408502787, 0.00016536217299290001, 0.00014533849025610834, 0.00013525654503609985, 0.00010526294499868527, 0.00014755214215256274, 0.00025887633091770113, 0.00021216266031842679, 0.0001793002593331039, 0.00022273931244853884, 0.00023172263172455132, 0.00022485730005428195, 0.00013799502630718052, 0.00012290519953239709, 0.00018959821318276227, 0.0002317909529665485, 0.00010609433229546994, 0.00012780402903445065, 0.00019247918680775911, 0.00016786441847216338, 0.00019638860248960555, 0.0002313218719791621, 8.6810672655701637e-05, 0.00022867917141411453, 0.00016247967141680419, 6.9713321863673627e-05, 0.00019748874183278531, 0.00012382445856928825, 0.00016667989257257432, 0.00020710685930680484, 0.00016857506125234067, 9.7819007351063192e-05, 0.00028233049670234323, 0.00020557816606014967, 0.00025965028908103704, 0.00012938860163558275, 0.00027347361901775002, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -100,49,50,-31,-68,-4,-64,-1,-53,17,-3,-26,31,36,31,-37,10,-8,89,14,16,-44,127,64,41,20,-1,28,-61,-102,-89,15,-39,-38,20,26,6,29,3,33,-20,-10,-71,12,-67,-17,-4,86,-14,21,-35,-19,-8,-2,23,-54,-86,5,-13,69,60,29,-3,2,-31,-46,-48,25,-58,-54,5,-10,14,-6,-69,-43,-47,7,-46,0,-55,66,78,-74,16,58,8,42,35,-10,2,-16,-35,-36,-56,8, 
  /* [1][0][][] */ 29,4,31,-41,-62,-30,-2,8,-14,9,43,-60,4,-3,-55,-41,-2,9,-71,16,-19,-76,2,37,-16,-70,-3,-53,67,-116,108,-88,47,15,-5,40,40,60,-16,-47,36,22,-10,-22,16,51,-127,-51,-57,-59,-23,-31,41,-42,-38,42,-6,-4,-37,22,15,48,2,-105,-16,-23,-53,-12,9,-20,-74,-20,-51,-16,20,-69,13,22,40,-59,-26,-29,-86,-26,26,-47,-22,23,-76,-13,-62,30,21,68,-53,57, 
  /* [2][0][][] */ 76,-14,11,16,25,-66,52,0,-12,6,-2,-6,-69,-25,2,-31,-89,-58,-30,48,15,-41,-31,29,0,-64,7,-17,-27,58,-55,127,-45,109,-35,29,-17,-9,-6,-11,-98,69,75,25,-65,15,-21,-9,38,12,-19,-45,47,-25,-18,59,60,-1,44,-14,19,40,-37,11,63,19,-8,1,23,51,-46,9,49,29,58,38,25,-69,51,40,79,-13,-38,19,-43,37,17,60,17,11,-14,37,-49,37,-14,26, 
  /* [3][0][][] */ 3,8,-28,1,14,-2,3,-54,-24,78,49,61,29,-16,-65,40,0,-48,33,22,19,127,46,-41,15,25,-21,9,67,-23,61,-6,-16,39,-39,-18,13,57,35,14,-87,-33,-33,31,-40,41,23,4,-15,-42,2,-23,47,-90,-32,-44,31,83,-24,-9,3,-12,-49,10,29,54,-48,5,-31,9,5,-62,-24,-51,32,-12,9,-6,-47,-41,-24,-1,-52,9,-6,-30,27,-31,4,22,36,-10,40,24,-40,47, 
  /* [4][0][][] */ 35,16,-44,16,27,26,-39,9,-28,82,93,-13,-13,0,5,-56,12,-22,-31,50,30,-43,55,92,-71,-7,-127,15,-41,-60,8,22,-62,-48,10,59,4,41,19,23,-36,-52,42,-24,-7,9,-30,55,-40,53,11,18,42,-19,-82,17,53,-24,5,-9,44,-9,20,13,-47,17,-38,9,-55,35,-46,57,48,-65,-38,-48,28,-57,-12,5,-43,88,-76,0,-31,26,27,-55,47,5,28,15,-57,-25,33,25, 
  /* [5][0][][] */ -77,54,41,-12,56,-11,48,-29,-22,47,2,-22,28,-29,-28,-34,-19,-48,59,38,-107,-15,-64,44,-38,-9,43,22,43,-61,-10,58,58,122,-22,46,-15,29,51,-18,-36,94,78,-18,-7,74,49,5,9,22,-10,36,16,-46,43,-80,63,-57,-53,-76,73,87,-60,-9,79,-32,-78,-54,-59,-14,-61,2,-10,4,-30,-49,19,-37,-47,-24,127,-19,26,-77,-76,48,17,-14,-53,41,28,9,-17,18,11,74, 
  /* [6][0][][] */ 50,-2,-88,25,-39,-117,100,98,-61,83,-8,77,-127,-88,54,66,-7,-63,2,11,-10,-16,-66,-57,-53,46,84,32,31,46,100,-43,30,18,10,-71,11,12,35,80,-2,23,-57,-17,-4,-57,-83,28,45,-115,-16,81,33,4,-19,-70,84,52,20,-8,-103,57,-99,-1,32,15,-6,63,37,29,-10,-41,-33,21,96,28,60,-23,38,-80,-3,-58,-77,68,10,-55,51,10,-40,63,44,51,-30,15,-38,121, 
  /* [7][0][][] */ 29,96,-49,-63,-18,-4,27,7,-73,40,-42,-51,-43,18,0,-13,-52,-59,-24,59,1,127,21,31,-21,12,20,36,52,57,77,-17,76,35,-28,18,-9,-1,8,36,-74,-6,19,-52,13,-40,73,-21,42,-70,-78,-23,-50,6,4,-2,48,16,-97,1,5,113,23,-17,-26,-9,-48,24,-43,-20,-105,42,21,59,-39,49,-59,57,3,-89,-20,-49,57,-76,50,-14,-16,-1,-1,75,-82,47,51,-42,-40,6, 
  /* [8][0][][] */ -12,76,-39,45,-30,-30,-82,30,-98,-36,2,5,-42,41,35,79,8,-43,0,4,34,0,-3,-17,-38,66,-4,21,-11,-23,-41,-37,-25,-53,-24,-72,-45,20,44,1,3,-41,29,5,-30,-38,11,-12,-29,-20,41,69,1,-16,-66,99,-41,24,-2,-33,-42,3,18,53,-39,-59,-32,-10,-37,13,8,2,-22,-53,-115,-15,-40,23,-60,-36,-31,7,-38,-30,-5,-8,15,32,4,61,-55,-14,-82,-127,15,-53, 
  /* [9][0][][] */ -20,14,-76,56,-31,-38,76,48,-11,43,-31,98,-33,-15,30,127,19,20,69,9,25,11,32,-100,-43,-7,22,-8,16,-25,41,49,-34,-7,3,-125,28,-24,-31,-24,-12,23,36,-30,-3,0,11,15,36,83,24,-12,-50,-80,1,3,-3,-14,63,-19,-72,53,-59,-33,87,-17,-23,3,-60,26,42,30,-15,94,-18,-21,-25,24,-46,-8,52,-30,64,-1,24,-23,-17,-32,-59,22,-2,-6,67,32,-42,-2, 
  /* [10][0][][] */ 69,-12,-39,5,-33,-34,84,-6,17,-35,-28,-10,-92,-14,10,-10,-67,-24,15,13,36,39,19,-2,-49,83,42,-17,-49,-90,-31,-25,75,-39,57,7,84,-95,81,127,24,-56,1,-1,-14,-101,-5,62,28,83,-80,-47,-19,35,16,52,6,-64,74,62,-20,47,-59,-23,-10,-68,27,51,28,-26,-8,33,118,40,34,-85,35,-48,65,-2,-51,36,44,26,-46,-16,6,48,-43,-18,25,49,57,80,-41,13, 
  /* [11][0][][] */ -52,-52,51,-59,4,-22,-22,-50,52,-64,-5,-5,-15,0,14,6,-56,6,52,2,-62,21,-87,-89,11,11,-45,35,36,-72,37,-43,16,-2,29,-35,-62,14,-110,11,-65,71,-48,49,28,1,-4,-39,19,-47,-73,-57,21,34,78,-60,-51,-64,7,-44,-36,-52,-21,-118,3,-72,70,63,127,20,80,-33,-40,-12,73,-33,103,34,30,55,30,-1,-23,84,74,-5,-3,-14,-81,-67,-13,14,63,51,48,78, 
  /* [12][0][][] */ 44,-9,-8,-46,34,112,-20,41,42,78,9,61,13,44,7,5,-71,42,23,62,127,1,82,-68,33,21,-72,-74,-21,99,3,21,37,-2,1,-29,43,3,-27,-31,14,-21,47,66,-28,45,1,-4,-58,34,8,24,-28,-32,16,21,-20,67,18,44,37,-91,15,-104,-5,102,-19,-29,-10,-43,59,26,-3,5,-13,48,-16,47,-88,-19,-20,29,122,17,-3,84,-28,-76,80,11,-78,66,69,10,-23,-99, 
  /* [13][0][][] */ -11,46,-10,-49,-34,-14,-7,-26,1,-9,-29,-74,55,-107,-47,-69,-20,-38,-77,-15,-97,-36,30,102,-40,-11,102,17,25,-24,57,53,11,3,-126,127,-33,-60,33,-56,110,15,-7,32,-1,-89,53,-21,87,-5,-34,39,30,-9,7,91,97,-52,-38,-19,61,44,4,-93,-2,40,-45,42,-69,-43,-87,15,-67,10,-44,-94,-109,17,32,75,-9,63,34,-88,66,46,22,-18,-17,-20,-6,24,-70,7,-19,-9, 
  /* [14][0][][] */ -3,38,-75,-33,77,79,-88,2,19,-28,79,-8,7,-26,-43,-61,-69,4,35,127,9,-26,8,11,0,13,-29,66,10,6,-19,20,59,4,-46,10,-21,45,69,12,48,-1,30,9,-15,-34,51,-31,25,-4,-4,-19,47,8,-26,32,34,52,-78,-23,-7,-61,-42,-92,5,-30,-51,2,-74,44,-21,40,10,-41,-26,-33,32,-20,-54,-38,30,3,-9,-10,-4,45,-16,-19,-31,60,62,23,-6,-45,-29,-67, 
  /* [15][0][][] */ -77,-61,42,-58,20,-34,-35,-102,1,6,-18,64,-2,-17,41,94,-109,-4,13,-84,18,-31,-20,-92,51,2,58,-64,-68,-127,-66,20,-43,51,104,-104,-6,-45,20,-24,-13,9,33,-30,4,-8,64,103,-54,-15,15,-52,-54,65,5,-59,-121,-15,100,29,-44,18,-90,22,-58,-13,16,21,61,-79,98,-38,55,-20,-35,-46,19,31,67,17,-17,74,67,33,-8,-26,-122,12,-10,-56,-85,20,51,-26,-27,72, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.002495660213753581, 0.0029031254816800356, 0.0029141355771571398, 0.0027041370049118996, 0.0029812869615852833, 0.0033469356130808592, 0.0021557493600994349, 0.0023681540042161942, 0.0037860095035284758, 0.0030595939606428146, 0.0023780432529747486, 0.0024475972168147564, 0.0034564940724521875, 0.0027731955051422119, 0.0047495919279754162, 0.0030415584333240986, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 9030, 17343, -7031, 1352, -102, 2371, -2252, 2364, 18088, -1953, -8314, 11156, -18169, 9062, 3614, 11650, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.8721416280604899e-05, 6.8308836489450186e-05, 6.8567896960303187e-05, 6.3626757764723152e-05, 7.0147929363884032e-05, 7.8751429100520909e-05, 5.0723516324069351e-05, 5.5721273383824155e-05, 8.9082575868815184e-05, 7.1990449214354157e-05, 5.5953958508325741e-05, 5.759052510256879e-05, 8.132927177939564e-05, 6.5251660998910666e-05, 0.0001117551073548384, 7.1566078986506909e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -3,116,-88,40,52,-29,104,68,-62,1,32,-85,81,127,-71,24, 
  /* [1][0][][] */ -27,1,-69,-36,-16,38,25,-127,26,-49,-18,-51,-18,-48,-68,11, 
  /* [2][0][][] */ -23,-35,44,82,30,50,-112,127,-24,4,76,-62,-12,-66,-38,67, 
  /* [3][0][][] */ 79,-89,67,-11,-7,-35,-32,127,-28,51,69,52,-11,51,7,11, 
  /* [4][0][][] */ -49,-23,-21,43,-99,8,-29,-127,1,-16,43,-8,31,48,109,125, 
  /* [5][0][][] */ 127,35,-36,-26,-86,13,35,71,16,-11,62,92,123,27,-107,5, 
  /* [6][0][][] */ 19,-28,-53,-46,-65,12,-5,-48,-40,-45,-27,26,86,56,127,-12, 
  /* [7][0][][] */ -59,27,-36,-76,-2,-60,-69,14,-86,47,-61,-56,-127,-39,8,87, 
  /* [8][0][][] */ 46,37,67,2,50,19,65,7,66,-28,43,10,-127,-29,-79,12, 
  /* [9][0][][] */ -35,64,28,-40,-21,-14,29,-13,-31,55,-36,22,44,127,27,22, 
  /* [10][0][][] */ 88,61,-40,63,-23,-10,59,-57,-80,-32,-69,-118,-127,-74,20,93, 
  /* [11][0][][] */ 45,1,59,6,-14,-34,11,107,-89,21,-29,3,-16,-8,64,127, 
  /* [12][0][][] */ -60,-21,-4,-9,19,-11,127,48,-60,21,6,-13,-10,81,-66,119, 
  /* [13][0][][] */ 10,43,2,39,70,28,106,103,-45,73,-82,-55,16,73,-127,-23, 
  /* [14][0][][] */ -125,127,-9,-28,-7,-1,66,-10,-36,29,127,-5,-108,17,-63,61, 
  /* [15][0][][] */ -9,-23,-127,-43,88,-41,-94,-45,-19,-21,-23,-75,-2,-87,-52,48, 
  /* [16][0][][] */ 120,-14,16,-6,34,-27,43,-21,-44,15,127,49,53,8,-34,15, 
  /* [17][0][][] */ 5,19,-36,-116,-18,-72,117,-127,9,-26,-43,39,36,73,-6,62, 
  /* [18][0][][] */ 19,120,-21,-57,53,-82,-27,-48,-39,127,-22,4,-39,46,-27,-25, 
  /* [19][0][][] */ -74,-114,112,-100,39,-127,32,-30,42,36,92,107,19,-18,62,-26, 
  /* [20][0][][] */ -21,88,50,-1,7,-2,19,-21,56,-10,95,-22,-127,-29,-81,-3, 
  /* [21][0][][] */ -82,39,18,13,61,33,68,53,-127,62,-39,29,-37,12,-70,-35, 
  /* [22][0][][] */ 24,-91,57,21,29,-127,123,15,21,-52,-54,-88,53,-86,-51,-66, 
  /* [23][0][][] */ -54,-106,52,77,32,-14,28,-47,20,-36,80,-2,14,80,85,127, 
  /* [24][0][][] */ -2,0,24,72,45,19,-39,-127,65,13,-38,6,1,-2,-19,-20, 
  /* [25][0][][] */ -9,33,27,-47,-21,-4,13,-39,-21,61,-38,-7,43,127,33,5, 
  /* [26][0][][] */ -64,76,2,18,29,-87,-2,-28,11,19,5,68,11,0,-85,127, 
  /* [27][0][][] */ -15,-127,-41,10,-57,95,-2,-65,21,-35,55,-33,35,-42,-91,-22, 
  /* [28][0][][] */ -38,1,33,78,24,7,-41,-127,-125,47,106,-11,69,9,-47,-24, 
  /* [29][0][][] */ -127,106,-29,-37,-29,19,-117,-66,-38,-34,-1,2,3,-64,-120,61, 
  /* [30][0][][] */ 54,83,-65,78,-116,-105,-71,-9,-46,-10,8,-118,127,32,-16,101, 
  /* [31][0][][] */ 127,31,-54,-30,-59,25,100,41,-64,-12,61,46,44,26,-16,3, 
  /* [32][0][][] */ -32,-14,127,-7,-21,56,70,15,-22,-20,-2,23,-2,62,53,45, 
  /* [33][0][][] */ 8,35,-58,-46,-17,36,117,29,-6,-12,18,-78,106,127,-50,47, 
  /* [34][0][][] */ -91,-19,103,26,32,-48,105,-7,-127,42,33,-50,56,66,-46,-37, 
  /* [35][0][][] */ -4,21,-50,9,-68,120,-37,-9,-24,127,-7,86,-68,66,19,20, 
  /* [36][0][][] */ -5,-73,127,-47,-49,19,-46,-18,20,23,-49,74,6,-81,-34,49, 
  /* [37][0][][] */ 86,-4,71,-23,113,-66,-40,23,-52,127,-66,-5,-81,-35,111,-22, 
  /* [38][0][][] */ 64,55,28,-107,-1,-50,-118,64,-100,69,-122,-69,-67,-127,-107,63, 
  /* [39][0][][] */ -68,20,-48,-24,-80,-72,77,16,-127,-32,12,76,40,2,5,50, 
  /* [40][0][][] */ 127,46,16,-87,-62,22,12,-38,-34,-22,-40,-74,3,48,44,30, 
  /* [41][0][][] */ 89,-85,-69,-54,-7,-8,-61,-23,63,-30,7,-51,127,-79,51,-31, 
  /* [42][0][][] */ -17,-80,-51,127,1,-100,-101,24,0,6,5,49,-84,74,-71,-4, 
  /* [43][0][][] */ -84,-56,-43,-118,-53,5,1,68,48,-127,-36,33,-12,-48,-22,101, 
  /* [44][0][][] */ -55,49,32,-60,-34,-36,42,127,113,-96,93,126,126,47,-41,13, 
  /* [45][0][][] */ 23,84,-95,94,127,-103,-40,-55,103,-72,80,-61,-38,4,-93,76, 
  /* [46][0][][] */ -18,-36,17,-6,93,-17,29,9,3,127,-27,-105,35,64,-35,62, 
  /* [47][0][][] */ 72,-42,-34,-16,73,-19,-40,-52,-9,127,-27,36,-11,-105,-86,12, 
  /* [48][0][][] */ 6,25,-19,-127,-11,-52,108,-112,2,-4,-31,51,46,60,-2,41, 
  /* [49][0][][] */ -33,127,-71,28,39,-64,70,63,-29,19,38,-87,-35,65,109,-100, 
  /* [50][0][][] */ 16,42,-15,6,-127,3,-70,-61,55,71,31,28,-33,-37,5,35, 
  /* [51][0][][] */ 127,-37,-42,-15,-37,88,-89,-41,47,-18,-39,60,-29,-66,5,34, 
  /* [52][0][][] */ -11,-48,53,72,-35,-88,-127,-17,-41,-48,-39,-73,24,-53,23,67, 
  /* [53][0][][] */ 25,108,48,-116,9,127,88,-10,-15,-17,-7,-42,88,-111,0,51, 
  /* [54][0][][] */ 24,120,-3,-24,-10,-95,-100,55,9,-28,-38,127,70,80,9,65, 
  /* [55][0][][] */ -36,-12,63,26,65,-31,99,91,-82,3,14,16,127,55,-2,-10, 
  /* [56][0][][] */ 127,31,11,17,-59,111,-58,-72,-33,56,-96,5,-67,104,-20,37, 
  /* [57][0][][] */ -56,-34,-57,-42,-73,-110,59,-22,-127,-30,59,64,11,32,-18,50, 
  /* [58][0][][] */ 49,-49,63,24,9,-58,-17,3,28,-11,-127,-29,26,-31,-29,40, 
  /* [59][0][][] */ 69,20,-127,83,9,28,73,-19,-73,-41,30,-97,-105,-53,22,101, 
  /* [60][0][][] */ -7,37,-18,15,-21,-34,-20,8,-41,-71,67,127,-54,-124,-46,0, 
  /* [61][0][][] */ -39,13,74,-102,-83,50,13,123,-17,-112,61,74,89,-10,5,127, 
  /* [62][0][][] */ 73,47,-13,-127,-21,2,6,-37,-3,32,-36,43,20,-21,-92,-67, 
  /* [63][0][][] */ 0,-28,-1,-6,-65,-75,-59,15,-72,-17,-37,-21,127,-3,52,-15, 
  /* [64][0][][] */ 20,9,-28,51,-118,-54,-24,-74,50,127,41,3,33,-62,-56,115, 
  /* [65][0][][] */ -26,11,-16,-10,-82,90,24,-27,55,-124,105,-77,86,78,-127,60, 
  /* [66][0][][] */ -121,106,-89,-84,54,-29,-120,-71,-114,127,95,-3,-114,-53,53,60, 
  /* [67][0][][] */ -2,-32,-127,-109,59,68,13,-26,-28,-9,50,-15,22,33,12,51, 
  /* [68][0][][] */ 50,21,-24,-50,-71,33,15,37,-57,63,121,-10,-16,-48,-127,2, 
  /* [69][0][][] */ 65,-94,44,-52,17,-114,-33,127,0,65,84,77,-31,61,-41,3, 
  /* [70][0][][] */ 53,9,127,43,103,-15,118,-4,42,28,-62,30,-65,68,-64,32, 
  /* [71][0][][] */ 3,28,87,-77,-127,-82,16,11,-23,-14,25,-95,-80,-2,4,32, 
  /* [72][0][][] */ -58,-96,27,-116,80,-8,11,44,-64,20,-127,-21,63,124,-52,114, 
  /* [73][0][][] */ 18,16,48,-10,127,-96,-53,20,-46,93,-93,35,-91,-60,119,-26, 
  /* [74][0][][] */ -106,3,-127,-69,55,-48,-43,23,-75,1,-109,-27,-40,-59,-50,79, 
  /* [75][0][][] */ 97,-22,48,-39,23,7,-127,-17,-9,-99,58,-3,8,-10,-4,-12, 
  /* [76][0][][] */ 9,-52,-32,127,50,104,111,-49,90,-125,68,122,48,-85,-54,33, 
  /* [77][0][][] */ -35,-40,124,-19,36,-30,-18,-127,21,21,32,85,50,49,19,0, 
  /* [78][0][][] */ -51,4,12,-43,-2,-63,35,-16,32,-18,20,-89,-107,-75,-127,-50, 
  /* [79][0][][] */ -112,-75,-30,17,127,27,-18,28,13,25,-10,59,-57,-82,-83,-9, 
  /* [80][0][][] */ 10,-116,60,127,-26,-18,-106,83,-14,27,63,-8,-63,-1,-6,60, 
  /* [81][0][][] */ 97,71,-23,74,-14,27,24,127,22,3,117,61,108,34,65,-18, 
  /* [82][0][][] */ -58,5,6,-33,21,-127,-106,-74,1,70,-38,-28,-33,94,-78,-19, 
  /* [83][0][][] */ 106,-20,79,-37,-44,-17,-126,-4,23,-127,12,-54,-22,-13,10,-24, 
  /* [84][0][][] */ 7,-78,-106,24,127,32,42,36,-123,21,-115,-18,42,-45,-88,12, 
  /* [85][0][][] */ 22,93,56,-38,117,12,36,-120,127,-30,32,-22,107,-83,21,-14, 
  /* [86][0][][] */ 120,-33,127,51,5,-52,74,39,-60,-51,-96,-49,39,21,-61,8, 
  /* [87][0][][] */ -10,7,13,-82,66,-32,-40,19,30,-40,76,-29,-86,-127,-10,27, 
  /* [88][0][][] */ -54,-27,40,2,24,32,-65,-42,-5,14,-72,-127,-42,-34,-14,-19, 
  /* [89][0][][] */ -87,19,15,-79,21,-1,-127,28,84,25,-69,-4,-23,-90,-55,-16, 
  /* [90][0][][] */ -9,-11,-27,-73,127,26,-54,34,40,57,28,-9,35,27,-58,-26, 
  /* [91][0][][] */ -37,-65,29,60,-41,-1,-10,80,-49,-54,25,-53,4,71,30,127, 
  /* [92][0][][] */ -17,71,8,-11,-20,65,-95,40,-35,-11,64,4,-30,127,55,20, 
  /* [93][0][][] */ -17,81,-56,-76,58,74,-75,14,60,62,70,54,-127,15,-55,76, 
  /* [94][0][][] */ 20,60,89,5,-127,-42,12,-7,22,-23,31,-13,-59,-26,9,-20, 
  /* [95][0][][] */ -13,20,39,-8,127,-28,-96,85,18,18,-83,88,-11,-3,92,-44, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0015539702726528049, 0.0025982600636780262, 0.0020392369478940964, 0.0018766166176646948, 0.0012280039954930544, 0.0024652446154505014, 0.0018333450425416231, 0.0024957323912531137, 0.0022092307917773724, 0.0025866497308015823, 0.0015798592939972878, 0.0025153569877147675, 0.0016051533166319132, 0.0012650081189349294, 0.0015492336824536324, 0.0018276226473972201, 0.0032474531326442957, 0.0021373245399445295, 0.0020471708849072456, 0.0012943557230755687, 0.0021355000790208578, 0.0017700198804959655, 0.0013628257438540459, 0.0018937729764729738, 0.0036146228667348623, 0.002310832729563117, 0.0020443967077881098, 0.0022688605822622776, 0.0015842276625335217, 0.0021969550289213657, 0.0015928990906104445, 0.0025918369647115469, 0.0024936271365731955, 0.0014925654977560043, 0.0013663809513673186, 0.0017877351492643356, 0.0023236260749399662, 0.0015068339416757226, 0.0012317971559241414, 0.0016343306051567197, 0.0024565623607486486, 0.0017603350570425391, 0.0023448576685041189, 0.0017106501618400216, 0.0018287366256117821, 0.0018919636495411396, 0.0024007037281990051, 0.0017455903580412269, 0.0012215761234983802, 0.0018800954567268491, 0.0021367140579968691, 0.0018553195986896753, 0.0015669118147343397, 0.0021570352837443352, 0.0021479593124240637, 0.0018092358950525522, 0.0018996379803866148, 0.0018602474592626095, 0.0022265389561653137, 0.0021443080622702837, 0.0023483345285058022, 0.0018621076596900821, 0.0025185481645166874, 0.0020038096699863672, 0.0013754605315625668, 0.0014207649510353804, 0.0014233815018087626, 0.0020165301393717527, 0.0023285751231014729, 0.0021043461747467518, 0.0020623344462364912, 0.0016036833403632045, 0.0016653710044920444, 0.0016212803311645985, 0.0017192617524415255, 0.0014390081632882357, 0.0016987363342195749, 0.0021938497666269541, 0.0017265809001401067, 0.0019518020562827587, 0.0011751555139198899, 0.0018088071374222636, 0.0022555068135261536, 0.0018681185320019722, 0.001576873823069036, 0.002160010626539588, 0.0017397814663127065, 0.0017277214210480452, 0.002293373690918088, 0.002030310221016407, 0.0020855031907558441, 0.0021159863099455833, 0.0017034941120073199, 0.0016581189120188355, 0.0027348813600838184, 0.0021322951652109623, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1269, -2, 2839, 4469, 5590, -1843, 3476, -989, -1981, -407, 4295, -1866, 3515, 5061, 2062, 2310, -534, -412, -1475, 5222, 2198, -570, 2718, -574, -567, 2931, 1396, 1590, 4929, 2100, 3575, 974, 1576, 4466, 5012, 3134, -436, 3307, 3270, -3553, -196, 1446, -22, 1569, -1280, 475, -1121, 871, -6104, 1535, 1206, -2697, 5004, -676, 1776, 1463, 1073, 2337, -828, -1513, 299, 1606, 366, 3571, 5373, 3451, 2959, 3892, 3115, -698, 2450, 4731, 2974, -1646, 4511, 5901, 463, -2919, 588, 1139, 7801, 1777, -357, -2446, 1520, 597, 1663, -2413, 2938, -374, 3081, 1112, 57, -2748, -122, 1364, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00014395151811186224, 0.00024068893981166184, 0.00018890402861870825, 0.00017383975500706583, 0.00011375573376426473, 0.00022836710559204221, 0.00016983129899017513, 0.00023119132674764842, 0.00020465135457925498, 0.00023961342230904847, 0.00014634973194915801, 0.0002330092538613826, 0.00014869283768348396, 0.00011718359746737406, 0.0001435127342119813, 0.00016930120182223618, 0.00030082673765718937, 0.00019799033179879189, 0.00018963898764923215, 0.00011990220809821039, 0.00019782132585532963, 0.0001639651891309768, 0.00012624490773305297, 0.00017542902787681669, 0.00033483936567790806, 0.00021406321320682764, 0.00018938200082629919, 0.00021017513063270599, 0.00014675439160782844, 0.00020351419516373426, 0.00014755767188034952, 0.00024009394110180438, 0.00023099631653167307, 0.0001382633054163307, 0.00012657423212658614, 0.00016560623771511018, 0.00021524832118302584, 0.00013958505587652326, 0.00011410711158532649, 0.00015139566676225513, 0.00022756282123737037, 0.00016306804900523275, 0.00021721509983763099, 0.00015846549649722874, 0.00016940440400503576, 0.00017526141891721636, 0.00022238837846089154, 0.00016170217713806778, 0.0001131602912209928, 0.00017416200716979802, 0.00019793378305621445, 0.00017186690820381045, 0.00014515034854412079, 0.00019981623336207122, 0.00019897548190783709, 0.00016759795835241675, 0.00017597232363186777, 0.00017232340178452432, 0.00020625468459911644, 0.00019863725174218416, 0.00021753717737738043, 0.00017249571101274341, 0.00023330486146733165, 0.00018562223704066128, 0.00012741531827487051, 0.00013161207607481629, 0.00013185446732677519, 0.00018680059292819351, 0.00021570676472038031, 0.00019493540457915515, 0.00019104365492239594, 0.0001485566608607769, 0.00015427108155563474, 0.00015018675185274333, 0.00015926323249004781, 0.00013330203364603221, 0.00015736186469439417, 0.0002032265329034999, 0.00015994123532436788, 0.00018080451991409063, 0.00010886013478739187, 0.00016755824617575854, 0.00020893811597488821, 0.00017305252549704164, 0.0001460731728002429, 0.00020009186118841171, 0.00016116407641675323, 0.00016004689678084105, 0.00021244589879643172, 0.00018807710148394108, 0.00019318988779559731, 0.00019601367239374667, 0.00015780259855091572, 0.00015359929238911718, 0.0002533447986934334, 0.00019752443768084049, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 36,66,30,-87,-82,26,-9,84,-7,-56,-114,-111,-102,123,-49,71,35,99,28,0,-32,-91,-39,9,85,-110,10,110,57,-76,82,8,-107,99,32,-67,-26,12,-87,-10,-104,-60,120,-70,70,-10,-81,108,-116,99,-89,-1,-25,78,7,53,-70,-82,-3,41,-7,89,48,-127,75,-115,-99,52,61,-84,-8,126,-57,42,-40,113,-59,-78,-21,-13,-115,42,80,25,-40,-90,-52,-49,31,47,31,62,-109,-95,-48,50, 
  /* [1][0][][] */ 76,10,76,39,27,-68,-4,125,40,37,-72,49,-106,-108,34,-68,-55,-29,16,-25,106,87,-80,-70,16,-17,-24,-63,84,52,-19,-62,-106,-83,-88,-77,42,-71,-39,22,-9,98,-1,38,45,11,-47,43,22,-113,4,-63,-7,-124,-48,-109,26,51,96,13,71,-77,-29,-32,124,-9,6,92,81,95,42,118,0,25,60,36,71,-85,127,-7,-77,93,-60,74,29,9,-114,41,-55,-55,63,-25,-45,31,46,8, 
  /* [2][0][][] */ 5,-65,-80,-106,-36,11,69,-2,25,-28,-63,-41,50,76,-66,-110,-87,31,-33,30,-87,-51,25,27,-56,75,-43,-46,-15,-35,-77,29,61,-61,49,21,-77,28,-74,60,58,-29,104,69,-61,-20,55,28,-21,-52,2,92,-84,-75,4,-69,-30,21,74,105,88,77,-63,94,104,86,-72,-70,1,20,67,-23,33,16,-18,-66,87,118,-99,-71,-81,127,79,33,-67,37,40,25,70,74,83,108,-28,-19,74,88, 
  /* [3][0][][] */ -78,95,59,-81,106,97,80,69,103,39,38,-56,103,43,106,108,-118,74,-44,102,-71,74,-81,7,127,84,-104,19,57,34,-43,107,-92,30,26,-79,-94,-36,-86,-62,-88,-38,-68,21,-70,-104,-27,-34,-56,110,-31,-86,9,43,102,-66,-72,-104,64,-94,-88,31,-93,-30,12,89,-56,-32,-38,-42,87,3,85,89,-55,-74,-118,-43,76,-61,57,115,-78,-84,73,-102,93,-92,-33,-108,96,96,-76,-33,30,-31, 
  /* [4][0][][] */ -88,29,88,-11,61,17,-28,-49,20,58,-104,-74,-71,110,27,-100,80,43,-53,-85,-98,92,-113,-41,-26,-127,96,45,9,-115,124,36,-116,54,-53,-62,94,-26,-120,-100,110,100,-100,-108,-15,100,-41,-50,112,-31,115,115,91,-124,-4,49,-112,-23,112,-56,91,-32,-20,85,-57,35,-126,-82,28,97,41,-11,-62,-14,28,-74,-26,76,-36,47,33,-116,53,2,66,118,24,-73,-29,-18,100,66,92,-24,-116,-121, 
  /* [5][0][][] */ -84,109,-38,-50,26,-16,-46,67,-7,-102,56,26,-69,29,109,106,-104,116,97,-4,109,13,-43,100,-127,38,-24,-52,-27,41,65,2,-79,67,66,52,105,-59,-49,-30,66,-10,-5,-46,103,116,5,-2,30,95,96,29,-75,-45,48,-38,84,-34,-62,69,62,67,3,63,73,-48,51,49,98,-54,35,10,-92,78,25,-79,-48,45,39,6,75,88,-78,-48,48,-36,-84,-4,77,108,-30,108,-26,107,6,89, 
  /* [6][0][][] */ 123,-24,9,-102,-117,-17,60,-106,14,74,32,114,55,-66,-29,122,-82,96,26,88,-121,120,96,26,-65,43,-115,-108,-50,-97,8,55,-96,22,77,78,-117,-60,11,62,-90,44,85,0,-116,85,-99,-34,55,103,-8,-29,-81,-95,-65,-87,-73,-9,1,87,55,-52,95,14,127,96,-27,50,-2,-100,-47,-22,71,-60,99,112,-46,25,-53,-87,27,-25,-40,-106,87,-14,1,118,-9,-112,-100,-33,-83,-12,102,-112, 
  /* [7][0][][] */ 77,42,-54,-114,107,-20,-25,-63,22,-20,-11,-24,-51,112,94,58,75,-4,-35,52,71,-95,-14,-59,116,-58,52,104,-89,-32,-11,10,-113,-40,63,-25,110,-2,-4,-104,-83,44,-62,76,8,-62,-26,-54,64,-32,-35,127,-47,45,60,33,89,-117,-3,-106,16,-80,-47,-55,-6,-57,-110,-92,43,-112,-120,6,-106,70,-35,66,-72,-43,-75,-8,-106,72,5,70,-59,-75,-19,-83,49,113,113,-85,104,-78,85,-112, 
  /* [8][0][][] */ -40,-51,-101,-2,55,0,-26,-85,97,-124,120,-113,-20,-91,-103,2,14,77,93,-64,105,86,99,-56,-88,-110,25,-96,-80,-72,-97,-4,-56,-1,-84,120,-105,-96,-39,-63,-37,15,49,-14,0,-49,-39,98,55,91,-28,-44,114,-2,-5,-95,-17,5,-16,20,-85,-10,-92,93,-13,-35,19,-65,-66,42,-103,60,44,91,125,87,91,-25,-4,-13,42,94,3,55,65,-63,-27,80,60,67,-53,77,-99,127,117,-45, 
  /* [9][0][][] */ -37,-37,19,74,31,51,85,29,27,54,63,61,102,52,-32,-28,-6,-63,-60,-81,-89,81,17,-23,-82,-61,-50,50,65,-119,-37,49,-91,-67,109,-17,-34,-2,-77,-72,101,92,-5,3,40,53,22,-20,-31,-40,-102,-46,-112,19,23,71,0,-79,6,7,-3,-70,31,76,-127,73,71,67,97,-66,-111,11,45,22,63,-108,113,-58,8,-46,-116,-32,81,-77,55,-63,-97,18,-75,90,35,6,-74,56,18,62, 
  /* [10][0][][] */ -106,38,-89,-103,-49,82,-124,-115,72,-95,81,74,-17,26,63,-15,109,6,-95,31,-19,-76,-50,83,50,111,-43,-34,-115,-89,-20,-117,70,30,103,-122,110,-87,35,108,89,31,22,51,-24,19,-7,-14,-95,119,86,127,97,-103,90,56,27,-22,77,-18,66,59,89,54,-48,101,-11,51,-4,-23,70,21,-107,-113,16,54,68,105,70,-5,-8,48,-3,30,10,80,-91,19,-17,27,-64,85,54,57,16,-21, 
  /* [11][0][][] */ 87,69,-56,-77,86,0,-46,-70,-70,20,48,-22,31,-68,62,-63,-102,78,-6,-42,-30,-27,71,-75,-116,79,79,87,5,55,7,43,32,83,-106,-70,22,112,-39,-59,42,-109,114,-92,90,40,-100,-7,58,78,-53,72,64,-72,-34,-94,-37,86,-94,77,-23,10,127,-52,68,-21,100,3,98,103,-44,29,-78,-35,31,-88,-6,60,-60,4,-82,-32,-97,88,8,-78,-38,-13,-75,59,-23,-49,69,47,116,8, 
  /* [12][0][][] */ -46,-17,-28,126,51,-32,0,-68,-18,51,-5,82,-33,-41,-19,59,49,-11,36,127,-53,-14,88,87,34,115,-54,38,111,-63,79,78,71,1,34,-28,30,-35,68,56,102,120,43,-41,46,-11,-7,84,-68,115,-14,96,-6,-52,88,70,33,-54,-30,-71,43,9,90,25,-25,17,17,-22,-75,-60,62,17,-57,-32,-4,26,-37,24,66,-28,58,99,82,34,69,13,13,-50,-21,-52,31,38,-42,-64,-52,102, 
  /* [13][0][][] */ 48,44,69,-58,82,29,15,-28,34,-119,32,5,-3,59,46,71,67,51,22,74,105,-12,-10,-65,37,-80,15,-63,22,-69,-38,-11,-40,-89,21,-2,63,-97,73,42,-37,-75,70,82,52,5,45,64,-63,55,-33,-30,-28,-106,9,59,7,-37,53,-49,-77,-7,78,-53,-66,33,-15,-89,-65,-44,-95,82,-36,-19,97,-24,-30,62,1,-38,66,14,10,79,72,-55,-109,78,-52,-35,28,-30,38,127,-18,-83, 
  /* [14][0][][] */ -45,-59,92,56,51,-91,12,-5,3,54,-29,-80,2,112,-24,44,-105,-30,-26,-101,-3,43,-46,-48,-50,-29,76,27,73,-77,79,-51,-51,97,121,20,31,72,-85,-91,99,112,122,29,82,-66,-7,-48,-113,4,-31,-84,-12,-127,88,-111,21,-87,-38,-98,-86,-102,25,14,-7,66,10,-13,-105,-10,34,-59,-103,-75,60,-15,-90,-29,79,11,122,-47,120,31,-73,-74,-62,81,58,-4,-71,-29,-25,-107,-74,-60, 
  /* [15][0][][] */ 16,39,-10,-74,-107,84,-2,49,-123,-53,92,-47,-24,-66,-54,-48,-41,80,-113,7,-35,-94,-70,-36,-14,-20,92,99,-24,-88,-127,14,48,92,-52,-34,-39,90,-45,-100,-75,103,101,-71,74,46,-86,-104,18,-43,-43,-103,-89,-19,24,4,40,-24,80,-60,-117,-104,-114,-72,-56,21,-24,-90,-28,-79,-96,3,56,36,-12,72,-42,93,-114,-33,-34,-75,-53,-65,-63,-52,91,-42,48,-108,-94,91,-12,-51,103,-89, 
  /* [16][0][][] */ -9,20,-103,121,88,-69,101,102,-34,58,82,-65,-53,88,-120,-35,37,77,-50,-28,-117,-22,-108,15,127,-61,-83,21,-48,94,109,35,-73,-47,18,20,-18,95,-122,59,52,34,75,-61,-97,-19,-101,-60,-35,51,93,83,-44,-118,58,6,55,90,-45,-65,35,-26,-4,63,-13,29,68,-44,-1,-56,78,15,76,0,44,-82,80,-36,-102,-53,-31,43,-13,-99,93,-54,-2,-117,109,-97,98,-110,55,32,73,-90, 
  /* [17][0][][] */ -5,94,-102,-33,-29,47,-48,112,37,-53,102,-32,-29,107,41,-53,26,83,-14,71,27,1,-52,-16,-119,-2,-25,-73,-40,52,69,-94,51,-33,-27,47,43,-53,-15,48,-46,105,-16,-73,111,33,-82,-82,38,-108,-4,-126,-68,8,50,21,-65,87,-56,-54,107,99,78,79,-47,40,-83,73,-58,-58,16,-15,-33,-27,3,48,-108,-64,116,-87,-54,-16,103,-53,80,28,-44,105,16,127,-28,65,-104,-40,76,-29, 
  /* [18][0][][] */ 85,-97,-102,-19,48,43,-118,-86,-47,26,-70,-86,1,100,31,49,21,83,-98,-51,-70,58,26,22,16,-30,48,-94,-19,-97,38,-98,-35,89,109,-64,22,-44,-42,-62,-97,22,127,-50,-21,59,97,-51,80,9,-54,-108,-45,18,-31,34,67,32,-108,75,-73,-20,78,102,-12,35,-91,-100,112,-43,-71,89,-93,107,11,113,34,64,5,-15,-56,-46,-99,88,18,-77,104,18,73,36,-39,114,-102,-8,2,-114, 
  /* [19][0][][] */ 73,69,-96,80,106,83,-63,18,103,-59,10,-53,74,77,123,-37,36,-88,-29,117,-79,-74,34,118,45,-19,40,-22,77,49,114,-108,56,-19,-84,81,-97,-27,-57,27,58,32,58,55,-29,57,-107,107,127,24,90,-45,68,-85,87,102,41,19,-95,-40,-29,67,117,-41,102,-4,-64,90,118,-2,-96,15,19,81,24,96,11,71,-70,124,-100,-67,113,-100,44,6,86,-70,-74,1,-17,18,-32,-28,88,-113, 
  /* [20][0][][] */ 2,-90,-17,67,100,28,88,40,-55,-46,22,13,-24,-69,0,-93,-5,-57,107,42,58,-110,94,-20,-78,120,-84,17,15,-76,-42,12,62,104,84,-48,97,26,-108,17,110,-98,-87,-28,45,20,-30,-41,59,6,113,-54,4,99,30,-77,-33,-118,75,22,-36,91,66,81,34,99,29,-70,34,79,-60,24,-93,-85,-39,116,-6,-80,37,-74,18,127,82,-40,60,33,-68,-115,116,12,-104,-78,80,-65,29,78, 
  /* [21][0][][] */ 73,103,102,-80,-36,-44,-88,-32,-42,102,19,-99,-57,-83,-98,-91,-32,-16,-48,-105,-39,55,103,-65,92,35,83,-20,-62,-99,104,-1,-102,25,91,101,-111,-86,-106,19,2,47,-25,11,-78,101,-126,73,74,-127,-6,-76,60,-61,-93,-61,-30,-63,83,77,13,-48,-1,61,-41,44,-62,-3,-4,-37,-23,6,-40,-106,-51,4,-94,101,108,82,-44,86,24,-26,-126,-81,13,30,-51,41,-71,76,-45,-80,95,-34, 
  /* [22][0][][] */ 0,-8,73,16,-9,-78,127,15,12,37,9,57,-27,53,-26,-52,-43,12,-53,74,29,87,26,86,-2,76,-64,72,9,-64,-10,-28,-19,103,51,65,20,-32,-49,-55,15,52,-39,1,40,-20,103,-39,-58,33,-48,122,-13,99,5,67,117,66,-24,89,-63,-14,-13,65,76,-52,-60,20,45,76,-31,-14,27,75,-47,34,-30,-34,26,-15,104,-5,-59,27,61,118,10,56,59,65,104,50,-17,42,66,86, 
  /* [23][0][][] */ -27,6,14,-34,-86,19,39,20,33,-104,50,-111,-90,74,67,-33,23,34,50,18,53,91,50,-14,28,-55,-49,-50,-88,78,-3,100,55,-52,90,-17,2,89,73,-63,89,19,95,-77,-79,10,-85,96,22,75,-35,-35,-76,90,60,3,17,5,39,-17,-32,51,80,-106,96,-74,17,-11,90,97,-67,98,89,31,27,-42,-101,-2,-71,-3,-92,0,-74,-87,-44,-127,96,-92,-33,-56,-27,-62,-2,-24,-60,91, 
  /* [24][0][][] */ 3,96,118,103,66,-11,-106,119,9,-116,-74,78,30,1,4,-51,-20,49,-51,91,127,-16,-15,36,-49,56,-54,-50,88,125,104,-20,101,-40,-7,-23,26,-45,-72,-76,-1,103,-68,55,-36,86,48,-56,-81,-56,38,-38,-50,75,121,-45,49,-33,-12,-19,118,47,65,-16,-106,1,-52,115,78,-74,-15,40,2,-104,-3,-32,30,-66,-17,80,72,-61,68,-51,-75,-74,-14,-49,-79,89,-49,-20,-75,-52,80,102, 
  /* [25][0][][] */ 3,18,25,86,37,19,-8,-3,-27,93,75,80,-43,88,55,-57,-18,0,-69,27,43,89,31,97,81,-4,-54,1,77,42,-44,69,-18,-15,96,104,-60,81,-65,70,-20,127,45,11,3,-57,-36,-58,-50,58,-58,24,27,37,-68,-23,66,-24,118,28,-58,91,-61,64,-41,-35,-72,90,11,6,57,51,37,76,-11,38,54,16,12,-44,-23,36,-49,70,97,60,20,7,-20,75,-8,26,26,31,73,81, 
  /* [26][0][][] */ 77,-81,-1,3,84,-98,103,-44,42,2,-87,13,-38,-50,33,-27,102,5,-53,-74,44,-39,64,89,26,-13,39,45,32,-10,-47,-36,-6,51,46,127,-4,115,-118,97,99,13,-32,-100,-10,46,122,17,7,65,85,-3,95,105,62,37,108,-1,-60,-15,11,112,-81,-109,50,-28,-108,-26,-1,-48,45,39,-105,-29,-86,-70,-19,42,-28,56,105,38,-48,-13,-8,-31,-9,-94,32,17,99,105,-29,52,44,-16, 
  /* [27][0][][] */ 67,41,-120,125,-27,-24,13,-8,-97,116,-32,-4,-118,80,85,-56,63,-118,3,-118,-27,61,82,-93,-106,85,-47,51,99,-67,70,-110,125,-87,36,127,109,62,-84,-47,50,59,-29,59,65,-97,111,-73,37,-54,65,114,113,69,-110,-92,119,-35,-35,22,34,-82,-117,-100,33,114,27,-94,43,-7,37,-113,22,-79,-2,-87,-93,17,68,16,-65,-55,92,7,-115,-98,56,-40,112,14,53,112,114,54,66,-103, 
  /* [28][0][][] */ -104,124,-41,79,14,104,-108,7,67,-88,-92,65,71,-74,33,-91,-67,83,48,98,108,82,16,-84,42,-74,89,118,-52,31,-14,43,-41,22,-30,-56,46,95,-29,127,-102,-34,5,73,114,119,-18,12,123,-2,-104,-14,64,-50,31,59,81,53,47,90,54,-22,15,-114,-70,1,100,-42,-75,67,66,119,-104,53,127,34,65,-55,1,87,-65,49,70,-32,56,4,-75,-52,-92,27,85,-81,39,77,-8,95, 
  /* [29][0][][] */ 30,-11,44,21,-29,21,13,-93,-41,-59,-42,-114,77,-17,-65,-13,95,101,-55,105,43,-54,-76,-88,72,-76,-82,-41,-45,101,-52,32,-121,122,112,-3,-16,-102,38,-19,111,-58,-5,44,-72,77,-110,15,-22,56,35,33,-74,-11,95,85,35,-9,-59,16,127,108,-55,35,87,-75,-101,42,83,-2,-26,-39,-23,-117,-13,-90,-54,22,16,73,1,-56,45,-40,25,-118,-58,101,-14,46,-64,-55,-117,13,-57,-79, 
  /* [30][0][][] */ -70,-91,-86,-56,58,101,43,17,-68,16,30,40,98,56,-96,-107,89,113,83,7,-4,-73,122,-83,-7,48,-17,12,78,-36,12,45,-17,-30,25,25,-83,-40,89,-14,-21,-109,-61,-79,86,127,-42,-30,-68,104,-90,-68,-112,-32,97,-107,85,61,-4,-4,-39,-106,57,78,118,99,35,64,99,84,108,-76,31,-113,-80,20,52,-48,4,-33,50,36,110,29,81,-82,64,47,108,44,54,-115,1,94,-70,-75, 
  /* [31][0][][] */ 36,112,67,-37,-63,-16,98,-85,-78,-36,56,-56,-81,-78,87,17,-8,45,-21,28,-25,-38,89,6,96,95,-45,-62,-15,74,52,61,84,32,54,112,43,115,-20,-88,5,107,-96,29,22,94,52,-6,-105,-17,-57,79,21,-79,-15,-4,28,27,29,109,-9,-127,109,-104,20,-93,73,-63,-112,29,116,-34,72,-58,-41,55,-8,102,49,-81,-6,2,-110,-76,-29,90,115,-105,-66,82,41,-28,-36,-29,-111,78, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.001768325106240809, 0.0018647032557055354, 0.0019146245904266834, 0.0018465426983311772, 0.0017129729967564344, 0.0019949942361563444, 0.0017334100557491183, 0.0018297256901860237, 0.0018528022337704897, 0.0017733495915308595, 0.0017362504731863737, 0.0018866711761802435, 0.0024311903398483992, 0.0022651287727057934, 0.0017753837164491415, 0.0018472005613148212, 0.0017961751436814666, 0.0018602032214403152, 0.0018677799962460995, 0.0017783176153898239, 0.0018691760487854481, 0.0018577842274680734, 0.0029180757701396942, 0.0021063063759356737, 0.0018557308940216899, 0.0027699952479451895, 0.0018783424748107791, 0.0017404331592842937, 0.0018499614670872688, 0.001838799100369215, 0.0018036280525848269, 0.0018153905402868986, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -45, 217, -56, -133, 166, 204, 254, -144, 182, -151, -331, 253, 1862, 31, 94, -522, -111, 307, 118, 228, 96, -328, 1755, 61, 211, 1630, 62, -13, 218, 255, 109, -183, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.1607650928199291e-05, 4.3875370465684682e-05, 4.5049990148982033e-05, 4.3448064388940111e-05, 4.0305247239302844e-05, 4.6941040636738762e-05, 4.0786118916003034e-05, 4.3052368710050359e-05, 4.3595347960945219e-05, 4.1725874325493351e-05, 4.0852952224668115e-05, 4.4392265408532694e-05, 5.7204480981454253e-05, 5.3297149861464277e-05, 4.1773735574679449e-05, 4.3463543988764286e-05, 4.2262945498805493e-05, 4.3769487092504278e-05, 4.3947766243945807e-05, 4.1842769860522822e-05, 4.3980613554595038e-05, 4.3712570914067328e-05, 6.8660607212223113e-05, 4.9560152547201142e-05, 4.366425855550915e-05, 6.5176362113561481e-05, 4.4196294766152278e-05, 4.0951370465336367e-05, 4.3528507376322523e-05, 4.3265863496344537e-05, 4.2438306991243735e-05, 4.2715073504950851e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -32,-35,-32,-39,103,-8,102,17,41,-73,-80,-62,97,-47,114,-15,-73,-12,86,10,84,-30,127,-51,-41,109,21,-83,-77,-87,31,25, 
  /* [1][0][][] */ 92,127,-89,-74,10,104,17,-52,69,-99,-86,61,-109,7,30,77,-88,101,106,76,-73,3,-71,52,106,-32,-85,-93,66,95,111,-110, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0041046654805541039, 0.0034416951239109039, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 32015, -37685, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00014700392785016447, 0.0001232603972312063, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.089080139994621277, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.061523623764514923, } };
const TfArray<1, int> quant50_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.057569272816181183, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.082148425281047821, } };
const TfArray<1, int> quant54_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.047989401966333389, } };
const TfArray<1, int> quant58_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.021646443754434586, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.050223641097545624, } };
const TfArray<1, int> quant61_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.079500027000904083, } };
const TfArray<1, int> quant62_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.02089993841946125, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.037031251937150955, } };
const TfArray<1, int> quant65_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.092634662985801697, } };
const TfArray<1, int> quant66_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.035813864320516586, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10722789913415909, } };
const TfArray<1, int> quant69_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
